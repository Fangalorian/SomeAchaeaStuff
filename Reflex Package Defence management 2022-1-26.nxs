{"name":"defence management","enabled":true,"description":"Handling Defup/Keepup","type":"group","id":1,"items":[{"type":"function","name":"onLoad","enabled":true,"id":2,"code":"// Place any code here you'd like to autorun when the system is loaded\n\n\nrun_function('Defence Management', {}, 'Defence management');","items":[]},{"type":"alias","name":"Load Package","enabled":true,"id":4,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"function","fn":"onLoad"},{"action":"script","script":"//Enter the script here\nsys.echo('Defence handling package loaded', 'white');\nsend_command('glance');"}],"text":"load defs","items":[]},{"type":"alias","name":"Curing on","enabled":true,"id":18,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"command","command":"curing on|curing afflictions on|curing mosshealth 75|curing mossmana 70","prefix_suffix":true}],"text":"pp"},{"type":"alias","name":"Generosity Toggle","enabled":true,"id":9,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\nif ('selfishness' in GMCP.Defences)\n    queue.do('generosity');\nelse\n    queue.do('selfishness');"}],"text":"gen"},{"type":"alias","name":"Rebounding Toggle","enabled":true,"id":39,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"let command = 'curing priority defence rebounding ';\ncommand += args[1] == 'on' ? '25' : 'reset';\nsend_command(command);"}],"text":"r(on|off)"},{"type":"alias","name":"Mass Toggle","enabled":true,"id":41,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"let command = 'curing priority defence density ';\ncommand += args[1] == 'on' ? '25' : 'reset';\nsend_command(command);"}],"text":"m(on|off)"},{"type":"alias","name":"Dive Toggle","enabled":true,"id":42,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (args[1] == 'on') {\n\tsend_command('curing priority defence metawake 25 softfocusing 25');\n}\nelse {\n    send_command('curing priority defence metawake reset softfocusing reset');\n    send_command('softfocus off');\n    send_command('metawake off');\n}"}],"text":"^dive (on|off)$"},{"type":"trigger","name":"Starburst Def Swaps","enabled":true,"id":11,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"Your starburst tattoo flares as the world is momentarily tinted red.","actions":[{"action":"script","script":"// Takes blindness, metawake, softfocus off keepup after bursting\nsend_command(\"curing priority defence metawake reset\");\nsend_command(\"curing priority defence softfocus reset\");\nsend_command(\"curing priority defence blindness reset\");\n"}]},{"type":"group","name":"Defence Management","enabled":true,"id":25,"items":[{"type":"function","name":"Defence Management","enabled":true,"id":21,"code":"defup_complete_check = reflex_find_by_name('function', 'onGMCP', true, false, 'Defence management');\n\n\n\ndefences = {\n    // Used for multiclass swapping\n    currentClass: GMCP.Status.class,\n\n    prompt: '',\n\n    /***************************************************************************\n    ****************************************************************************\n    **\n    **  Defences that can be put up\n    **  Sorted by class, subclass, universal\n    **\n    ****************************************************************************\n    ***************************************************************************/\n\n    // Class specific defences\n    classDefs: {\n        Alchemist: [],\n        Apostate: [],\n        Bard: [],\n        Blademaster: ['constitution', 'retaliation', 'weathering', 'shinbinding', 'waterwalking', 'shinclarity', 'shintrance', 'consciousness', 'toughness', 'mindnet'],\n        Depthswalker: [],\n        Druid: ['affinity', 'flailingstaff', 'morph', 'panacea', 'spinningstaff', 'spiritbonded', 'vigour', 'ward', 'wildgrowth', 'harmony'],\n        Infernal: [],\n        Jester: ['slippery', 'gripping'],\n        Magi: [],\n        Monk: [],\n        Occultist: [],\n        Paladin: [],\n        Priest: [],\n        Psion: [],\n        Runewarden: ['deflect', 'resistance', 'weathering', 'fury', 'standingfirm', 'gripping'],\n        Sentinel: [],\n        Serpent: [],\n        Shaman: [],\n        Sylvan: [],\n        'Red Dragon': ['dragonarmour', 'dragonbreath'],\n        'Black Dragon': ['dragonarmour', 'dragonbreath'],\n        'Silver Dragon': ['dragonarmour', 'dragonbreath'],\n        'Gold Dragon': ['dragonarmour', 'dragonbreath'],\n        'Blue Dragon': ['dragonarmour', 'dragonbreath'],\n        'Green Dragon': ['dragonarmour', 'dragonbreath'],\n        'earth Elemental Lord': ['extrusion', 'strata', 'tremorsense'],\n        'water Elemental Lord': [],\n        'air Elemental Lord': [],\n        'fire Elemental Lord': [],\n        '(None)': [],\n    },\n\n    subclassDefs: {\n        Druid: {\n            Hyena: ['elusiveness', 'stealth'],\n            Bear: ['vitality'],\n            Elephant: ['vitality'],\n            Wolverine: ['elusiveness'],\n            Icewyrm: ['temperance', 'vitality'],\n            Wyvern: ['temperance', 'vitality'],\n            Hydra: ['resistance', 'temperance', 'vitality'],\n        },\n    },\n\n    // Defences universally available for use\n    universalDefs: [\n        'airpocket',\n        'alertness',\n        'blindness',\n        'clinging',\n        'cloak',\n        'coldresist',\n        'curseward',\n        'deafness',\n        'deathsight',\n        'density',\n        'electricresist',\n        'fangbarrier',\n        'fireresist',\n        'groundwatch',\n        'heldbreath',\n        'hypersight',\n        'insomnia',\n        'insulation',\n        'kola',\n        'levitating',\n        'magicresist',\n        'metawake',\n        'mindseye',\n        'nightsight',\n        'poisonresist',\n        'rebounding',\n        'satiation',\n        'scholasticism',\n        'selfishness',\n        'skywatch',\n        'softfocus',\n        'speed',\n        'telesense',\n        'temperance',\n        'thirdeye',\n        'treewatch',\n        'vigilance',\n    ],\n\n\n    /***************************************************************************\n    ****************************************************************************\n    **\n    **  Defence profiles that you swap between\n    **  Tracks defup and keepup settings\n    **  Each profile has a universal, class, and subclass slot\n    **\n    ****************************************************************************\n    ***************************************************************************/\n\n    defProfiles: get_variable('defProfiles') || {\n        Alchemist               : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Apostate                : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Bard                    : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Blademaster             : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Depthswalker            : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Druid                   : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Infernal                : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Jester                  : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Magi                    : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Monk                    : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Occultist               : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Paladin                 : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Priest                  : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Psion                   : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Runewarden              : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Sentinel                : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Serpent                 : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Shaman                  : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        Sylvan                  : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        'Red Dragon'            : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        'Black Dragon'          : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        'Silver Dragon'         : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        'Gold Dragon'           : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        'Blue Dragon'           : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        'Green Dragon'          : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        'earth Elemental Lord'  : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        'water Elemental Lord'  : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        'air Elemental Lord'    : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        'fire Elemental Lord'   : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n        '(None)'                : {defup: {universal: [], class: [] }, keepup: {universal: [], class: [] } },\n    },\n\n\n    /***************************************************************************\n    ****************************************************************************\n    **\n    **  Defence list manipulation functions. The more general functions are\n    **  defined first, followed by the specific ones that make use of them.\n    **\n    ****************************************************************************\n    ***************************************************************************/\n\n    // General defence addition/removal from a defence configuration list\n    add_to_defence_list(def_list, defence) {\n        // Adds defence to specified defence list if defence is not yet in list\n        if (!def_list.includes(defence)) {\n            def_list.push(defence);\n        }\n    },\n\n    remove_from_defence_list(def_list, defence) {\n        // Removes defence from specified list if defence is present in list\n        if (def_list.includes(defence)) {\n            def_list.splice(def_list.indexOf(defence), 1);\n        }\n    },\n\n    // General toggle of defence addition/removal from a defence list\n    toggle_defence_list_def(def_list, defence) {\n        // Removes defence from specified list if defence is in list\n        // Otherwise, adds defence to list\n\n        let category = def_list[0] == 'd' ? 'defup' : 'keepup';\n        let section = def_list[1] == 'u' ? 'universal' : def_list[1] == 'c' ? 'class' : 'subclasses';\n        \n\n        if (section == 'subclasses' && defences.currentClass == 'Druid') {\n          let morph = GMCP.CharStats[2].substring(7);\n          if (defences.defProfiles[defences.currentClass][category][section][morph].includes(defence)) {\n            defences.remove_from_defence_list(defences.defProfiles[defences.currentClass][category][section][morph], defence);\n          }\n          else {\n            defences.add_to_defence_list(defences.defProfiles[defences.currentClass][category][section][morph], defence);\n          }\n        }\n        else {\n          if (defences.defProfiles[defences.currentClass][category][section].includes(defence)) {\n            defences.remove_from_defence_list(defences.defProfiles[defences.currentClass][category][section], defence);\n          }\n          else {\n            defences.add_to_defence_list(defences.defProfiles[defences.currentClass][category][section], defence);\n          }\n        }\n\n    },\n\n    // Specific toggle of defup/keepup addition/removal\n    toggle_defup_def(defence, def_list) {\n        defences.toggle_defence_list_def(def_list, defence);\n    },\n\n    toggle_keepup_def(defence, def_list) {\n        defences.toggle_defence_list_def(def_list, defence);\n    },\n\n    // General activation/deactivation of raising defences of a defence List\n    activate_defence_list(def_list, state) {\n        let priority = state ? 25 : 'reset';\n        let command = `curing priority defence ${def_list.map(def => `${def} ${priority}`).join(' ')}`;\n        send_command(command);\n    },\n\n    // Specific activation/deactivation of raising defences in keepup/defup\n    defup() {\n        let defup = defences.defProfiles[GMCP.Status.class].defup;\n        defences.activate_defence_list(defup.universal, true);\n        defences.activate_defence_list(defup.class, true);\n        if (defup.hasOwnProperty('subclasses') && GMCP.Status.class == 'Druid') {\n            let morph = GMCP.CharStats[2].substring(7);\n            if (defup.subclasses.hasOwnProperty(morph)) {\n                defences.activate_defence_list(defup.subclasses[GMCP.CharStats[2].substring(7)], true);\n            }\n        }\n    },\n\n    defdown() {\n        let defup = defences.defProfiles[GMCP.Status.class].defup;\n        defences.activate_defence_list(defup.universal, false);\n        defences.activate_defence_list(defup.class, false);\n        if (defup.hasOwnProperty('subclasses') && GMCP.Status.class == 'Druid') {\n            let morph = GMCP.CharStats[2].substring(7);\n            if (defup.subclasses.hasOwnProperty(morph)) {\n                defences.activate_defence_list(defup.subclasses[GMCP.CharStats[2].substring(7)], false);\n            }\n        }\n    },\n\n    keepup() {\n        let keepup = defences.defProfiles[GMCP.Status.class].keepup;\n        defences.activate_defence_list(keepup.universal, true);\n        defences.activate_defence_list(keepup.class, true);\n        if (keepup.hasOwnProperty('subclasses') && GMCP.Status.class == 'Druid') {\n            let morph = GMCP.CharStats[2].substring(7);\n            if (keepup.subclasses.hasOwnProperty(morph)) {\n                defences.activate_defence_list(keepup.subclasses[morph], true);\n            }\n        }\n    },\n\n    keepdown() {\n        let keepup = defences.defProfiles[GMCP.Status.class].keepup;\n        defences.activate_defence_list(keepup.universal, false);\n        defences.activate_defence_list(keepup.class, false);\n        if (keepup.hasOwnProperty('subclasses') && GMCP.Status.class == 'Druid') {\n            let morph = GMCP.CharStats[2].substring(7);\n            if (keepup.subclasses.hasOwnProperty(morph)) {\n                defences.activate_defence_list(keepup.subclasses[morph], false);\n            }\n        }\n    },\n\n\n    /***************************************************************************\n    ****************************************************************************\n    **\n    **  Defence list visual display and editing functions. Will enable a\n    **  clickable display of defences possible to put up. Clicking a defence\n    **  will either add or remove it from a specific defence list under proper\n    **  circumstances.\n    **\n    ****************************************************************************\n    ***************************************************************************/\n\n    // Formats and displays defences for a specified defence list\n    // Parameters:\n    //              - def_vars: an array of defences to display (will not be modified)\n    //                  - i.e. universal_defs\n    //              - def_list: either defup_defs or keepup_defs (will be modified)\n    //                  - if null, only display the defs and do not modify anything\n    //              - function_indicator: null or 'd' or 'k'\n    //                  - used to continually display updates to display when using onclick action\n    //                  - indicates whether to use defup or keepup functions for onclick\n    //                      - null indicates no onclick\n    //                      - 'd' indicates use of defup specific functions\n    //                      - 'k' indicates use of keepup specific functions\n    defence_display(def_vars, def_list, function_indicator) {\n        let padding = ' ';  // Padding to be used in the formatting\n        let display = null; // Will hold the html configuration of all defences for display\n\n        let category = def_list[0] == 'd' ? 'defup' : 'keepup';\n        let section = def_list[1] == 'u' ? 'universal' : def_list[1] == 'c' ? 'class' : 'subclasses';\n\n        // Formats each defence in the desired html\n        if (function_indicator == null) {\n            display = def_vars.map(def => `<span><a style=\"color: #AFEEEE;\">[ ] ${def}</a>${padding.padEnd(26-(def.length+1),' ')}</span>`);\n        }\n        else if (function_indicator == 'd') {\n          if (section == 'subclasses' && defences.currentClass == 'Druid') {\n            display = def_vars.map(def => `<span><a onclick=\"defences.toggle_defup_def('${def}','${def_list}');defences.display_defup_defences();\" style=\"color: #AFEEEE; cursor:pointer;\">[<span style=\"color: #7CFC00;\">${defences.defProfiles[defences.currentClass][category][section][GMCP.CharStats[2].substring(7)].includes(def) ? 'X' : ' '}</span>] ${def}</a>${padding.padEnd(26-(def.length+1),' ')}</span>`);\n            \n          }\n          else {\n            display = def_vars.map(def => `<span><a onclick=\"defences.toggle_defup_def('${def}','${def_list}');defences.display_defup_defences();\" style=\"color: #AFEEEE; cursor:pointer;\">[<span style=\"color: #7CFC00;\">${defences.defProfiles[defences.currentClass][category][section].includes(def) ? 'X' : ' '}</span>] ${def}</a>${padding.padEnd(26-(def.length+1),' ')}</span>`);\n          }\n        }\n        else {\n          if (section == 'subclasses' && defences.currentClass == 'Druid') {\n            display = def_vars.map(def => `<span><a onclick=\"defences.toggle_keepup_def('${def}','${def_list}');defences.display_keepup_defences();\" style=\"color: #AFEEEE; cursor:pointer;\">[<span style=\"color: #7CFC00;\">${defences.defProfiles[defences.currentClass][category][section][GMCP.CharStats[2].substring(7)].includes(def) ? 'X' : ' '}</span>] ${def}</a>${padding.padEnd(26-(def.length+1),' ')}</span>`);\n\n          }\n          else {\n            display = def_vars.map(def => `<span><a onclick=\"defences.toggle_keepup_def('${def}','${def_list}');defences.display_keepup_defences();\" style=\"color: #AFEEEE; cursor:pointer;\">[<span style=\"color: #7CFC00;\">${defences.defProfiles[defences.currentClass][category][section].includes(def) ? 'X' : ' '}</span>] ${def}</a>${padding.padEnd(26-(def.length+1),' ')}</span>`);\n          }\n        }\n\n        // Adds a line break after every third formatted defence\n        for (let idx = 2; idx < display.length; idx += 3) {\n            display[idx] = `${display[idx]}<br/>`;\n        }\n\n        // Makes one large formatted string to display\n        display = `<p>${display.join('')}</p>`;\n\n        // Prints out the formatted defences to main gameplay screen\n        ow_Write(\"#output_main\", display);\n    },\n\n    // Displays available defences for customising defup defences\n    // Also displays current defup configuration\n    display_defup_defences() {\n        // Display defences available for defup\n        ow_Write(\"#output_main\", \"<p style='color: white;'>[defs]: Universal defup defences (click to toggle):</p>\");\n        defences.defence_display(defences.universalDefs, 'du', 'd');\n\n        if (defences.classDefs[GMCP.Status.class].length != 0) {\n            print(`[defs]: ${GMCP.Status.class} defences:`,\"white\");\n            defences.defence_display(defences.classDefs[GMCP.Status.class], 'dc', 'd');\n        }\n        if (defences.subclassDefs.hasOwnProperty(GMCP.Status.class)) {\n            if (GMCP.Status.class == 'Druid') {\n                let morph = GMCP.CharStats[2].substring(7);\n                print(`[defs]: ${morph} defences:`,\"white\");\n                if (defences.subclassDefs[GMCP.Status.class].hasOwnProperty(morph)) {\n                    defences.defence_display(defences.subclassDefs[GMCP.Status.class][morph], 'ds', 'd');\n                }\n            }\n        }\n\n        // Output a prompt for a nice delimiter between displays\n        let line = \"<p class=\\\"prompt mono\\\">\" + defences.prompt.formatted() + \"</p>\";\n        ow_Write(\"#output_main\", line);\n    },\n\n    // Displays available defences for customising keepup defences\n    // Also displays current keepup configuration\n    display_keepup_defences() {\n        // Display defences available for keepup\n        ow_Write(\"#output_main\", \"<p style='color: white;'>[defs]: Universal keepup defences (click to toggle):</p>\");\n        defences.defence_display(defences.universalDefs, 'ku', 'k');\n\n        if (defences.classDefs[GMCP.Status.class].length != 0) {\n            print(`[defs]: ${GMCP.Status.class} defences:`,\"white\");\n            defences.defence_display(defences.classDefs[GMCP.Status.class], 'kc', 'k');\n        }\n        if (defences.subclassDefs.hasOwnProperty(GMCP.Status.class)) {\n            if (GMCP.Status.class == 'Druid') {\n                let morph = GMCP.CharStats[2].substring(7);\n                print(`[defs]: ${morph} defences:`,\"white\");\n                if (defences.subclassDefs[GMCP.Status.class].hasOwnProperty(morph)) {\n                    defences.defence_display(defences.subclassDefs[GMCP.Status.class][morph], 'ks', 'k');\n                }\n            }\n        }\n\n\n        // Output a prompt for a nice delimiter between displays\n        let line = \"<p class=\\\"prompt mono\\\">\" + defences.prompt.formatted() + \"</p>\";\n        ow_Write(\"#output_main\", line);\n    },\n\n\n    /***************************************************************************\n    ****************************************************************************\n    **\n    **  Auxilary functions for checking defup completion, handling class\n    **  specific defences on class swap, saving configuration state between\n    **  login sessions, and showing displaying package_commands.\n    **\n    ****************************************************************************\n    ***************************************************************************/\n\n    // Checks if all defenes in defup_defs are present in GMCP.Defences\n    is_defup_complete() {\n        let current_defs = Object.keys(GMCP.Defences);\n        let general = defences.defProfiles[GMCP.Status.class].defup.universal.every(def => current_defs.includes(def)) &&\n                        defences.defProfiles[GMCP.Status.class].defup.class.every(def => current_defs.includes(def));\n        if (GMCP.Status.class == 'Druid') {\n            let morph = GMCP.CharStats[2].substring(7);\n            if (defences.subclassDefs['Druid'].hasOwnProperty(morph)) {\n                return general && defences.defProfiles['Druid'].defup.subclasses[morph].every(def => current_defs.includes(def));\n            }\n        }\n\n        return general;\n    },\n\n    // Resets keepup prio of class specific defences\n    swapped_class() {\n        sys.echo(`Initiating ${GMCP.Status.class} keepup!`, '#ffe866');\n        sys.echo(`Swapped to ${GMCP.Status.class}. Deactivating ${defences.currentClass} defences.`, '#ffe866');\n        let command = `curing priority defence ${defences.classDefs[defences.currentClass].map(def => `${def} reset`).join(' ')}`;\n        if (GMCP.Status.class == 'Druid') {\n            let morph = GMCP.CharStats[2].substring(7);\n            if (defences.subclassDefs['Druid'].hasOwnProperty(morph)) {\n                command += ` ${defences.subclassDefs['Druid'].map(def => `${def} reset`).join(' ')}`;\n            }\n        }\n        send_command(command);\n        defences.currentClass = GMCP.Status.class;\n        defences.keepup();\n    },\n\n    // Saves defup_defs and keepup_defs for storage between login sessions\n    save_defence_lists() {\n        set_variable('defProfiles', defences.defProfiles);\n        client.gmcp_save_system(true);\n    },\n\n    // Displays commands\n    display_menu() {\n        print('Defence package commands:', 'white');\n        print('   defs'.padEnd(33,' ') + '- shows defup/keepup package commands');\n        print('   defshow [defup|keepup]'.padEnd(33,' ') + '- shows modifiable defence configuration');\n        print('   def save'.padEnd(33,' ') + '- saves current settings using set_variable()');\n        print('   def load'.padEnd(33,' ') + '- reloads package functions');\n        print('   en [defup|keepup]'.padEnd(33,' ') + '- enables defup/keepup (puts up defences)');\n        print('   dn [defup|keepup]'.padEnd(33,' ') + '- disables defup/keepup (resets defence prio)');\n    },\n\n\n    // Prints out the defup_defs array\n    show_defup() {\n        console.log(defences.defProfiles[GMCP.Status.class].defup);\n    },\n};\n\n// Set morph subclasses for Druid\ndefences.defProfiles.Druid.defup.subclasses = {\n    Hyena: [],\n    Bear: [],\n    Elephant: [],\n    Wolverine: [],\n    Icewyrm: [],\n    Wyvern: [],\n    Hydra: [],\n};\n\ndefences.defProfiles.Druid.keepup.subclasses = {\n    Hyena: [],\n    Bear: [],\n    Elephant: [],\n    Wolverine: [],\n    Icewyrm: [],\n    Wyvern: [],\n    Hydra: [],\n};\n"},{"type":"function","name":"onGMCP","enabled":true,"id":27,"code":"//Enter the function here\nif (args.gmcp_method == \"Char.Defences.Add\") {\n    if (defences.is_defup_complete()) {\n        sys.echo(\"Defup complete! Resetting curing defence upkeep prios.\", '#ffe866');\n        defences.defdown();\n        reflex_disable(defup_complete_check);\n    }\n}"},{"type":"alias","name":"Show Menu","enabled":true,"id":32,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"defences.display_menu();"}],"text":"defs"},{"type":"alias","name":"Display Defences","enabled":true,"id":19,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (args[1] == 'defup') {\n    defences.display_defup_defences();\n}\nelse {\n    defences.display_keepup_defences();\n}"}],"text":"^defshow (defup|keepup)$"},{"type":"alias","name":"Modify Defup/Keepup","enabled":true,"id":26,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"// manual version of clicking on the defshow defup/keepup tables\n\nif (args[1] == 'add') {\n    if (defences.universal_defs.includes(args[2]) || \n        defences.class_defs[GMCP.Status.class].includes(args[2]) ) {\n        \n        if (args[3] == 'defup') {\n            defences.add_to_defup(args[2]);\n            defences.display_defup_defences();\n        }\n        else {\n            defences.add_to_keepup(args[2]);\n            defences.display_keepup_defences();\n        }\n    }\n}\nelse {\n    if (args[3] == 'defup') {\n        defences.remove_from_defup(args[2]);\n        defences.display_defup_defences();\n    }\n    else {\n        defences.remove_from_keepup(args[2]);\n        defences.display_keepup_defences();\n    }\n}\n"}],"text":"^def (add|remove) (\\w+) (defup|keepup)$"},{"type":"alias","name":"Save settings","enabled":true,"id":38,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"defences.save_defence_lists();\nprint('[defs]: Saved defup/keepup settings!', 'white');"}],"text":"def save"},{"type":"alias","name":"Enable Defup/Keepup","enabled":true,"id":23,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"sys.echo(`Enabled ${args[1]}.`, '#ffe866');\nif (args[1] == 'defup') {\n    if (defences.is_defup_complete()) {\n        sys.echo(\"Defup complete! Resetting curing defence upkeep prios.\", '#ffe866');\n        reflex_disable(defup_complete_check);\n    }\n    else {\n        sys.echo('Beginning defup. Hold still a moment.', '#ffe866');\n    \tdefences.defup();\n        reflex_enable(defup_complete_check);\n    }\n}\nelse {\n    defences.keepup();\n};"}],"text":"^en (defup|keepup)$"},{"type":"alias","name":"Disable Defup/Keepup","enabled":true,"id":24,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"sys.echo(`Disabled ${args[1]}.`, '#ffe866');\nif (args[1] == 'defup') {\n    defences.defdown();\n}\nelse {\n    defences.keepdown();\n};"}],"text":"^dn (defup|keepup)$"},{"type":"trigger","name":"Save on QQ","enabled":true,"id":28,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You grow still and begin to silently pray for preservation of your soul while you are out of the land.","actions":[{"action":"script","script":"defences.save_defence_lists();\ndefences.keepdown();"}]},{"type":"trigger","name":"Swapped class","enabled":true,"id":31,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You are now a member of the (?:\\w+) class\\.$","actions":[{"action":"script","script":"defences.swapped_class();"}]},{"type":"group","name":"Form Changing","enabled":true,"id":36,"items":[{"type":"trigger","name":"Dragonformed","enabled":true,"id":33,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"With an ear-splitting roar, you rear back your draconic head and scream out your triumph.","actions":[{"action":"script","script":"defences.swapped_class();"}]},{"type":"trigger","name":"Lesserformed","enabled":true,"id":34,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"Your draconic form melts away, leaving you suddenly weaker and more vulnerable.","actions":[{"action":"script","script":"defences.swapped_class();"}]},{"type":"trigger","name":"Forsake Earth","enabled":true,"id":35,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"Primal earth abandons you, your flawed physicality reasserting itself once more as you forsake your primordial form.","actions":[{"action":"script","script":"defences.swapped_class();"}]},{"type":"trigger","name":"Prevail Earth","enabled":true,"id":37,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"As the earth rises to clad your growing form in a skin of stone, you scream out in triumph, the very blood of Earth surging through your granite veins. By the will of Garash, Earth is yours to command!","actions":[{"action":"script","script":"defences.swapped_class();"}]}],"actions":[]}],"actions":[]}]}