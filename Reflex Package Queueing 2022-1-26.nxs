{"type":"group","name":"queueing","enabled":true,"id":1,"items":[{"type":"function","name":"Read_Me","enabled":true,"id":361,"code":"/*\n\nQueueing Framework v1.0.0\nby: Chubbs of Achaea\n\nHere's a basic framework for queueing in Achaea.\n\nAll code proper is located within (function) Queue.\n\nAll aliases and triggers reference code located within (function) Queue.\n\n------------------------------\n\nGeneral function parameters, behaviours, and usage examples are present in (function) Queue.\n\nRelevant information is located at the top of the function before any actual code.\n\nCode in (function) Queue is rather heavily commented to help out newer Nexus/JS users.\n\nLet me know if those aid understanding and how much they should be reduced by.\n\n------------------------------\n\nIf you have any problems or questions, send me a message on discord.\n\nI'm in Rom's general Achaea server and regularly check the #nexus-help channel.\n\n------------------------------\n\nPlease note:\n- This is a mostly stable framework.\n- There are probably issues as it's difficult to stress test on my own.\n- Your performance may vary depending on how ping affects the triggers.\n- If things randomly stop working, do 'load queue' to reset the package\n\n<insert obligatory=\"use at your own risk\"/>\n\nThanks, Zahan for having a nice ReadMe format I could rip off.\n\n*/"},{"type":"function","name":"onLoad","enabled":true,"id":360,"code":"run_function('Queue', {}, 'Queueing');"},{"type":"function","name":"Queue","enabled":true,"id":328,"code":"/*******************************************************************************\n********************************************************************************\n***\n*** Create and define queue namespace\n***\n***\t\tFunctions:\n***\t\t\t- do(...args)\n***\t\t\t\t- params: An array of at most alias_limit-1 elements where each\n***\t\t\t\t\t\t  element is a single command to be placed in an alias.\n***\n***\t\t\t\t\t\t  ie. queue.do('ent', 'group', 'wield eyesigil',\n***\t\t\t\t\t\t\t\t'throw eyesigil at ground');\n***\n***\t\t\t\t- behaviour: Invokes dor_stop(), ceasing repeating actions.\n***\t\t\t\t\t\t\t Updates mangorize alias with contents of provided\n***\t\t\t\t\t\t\t parameters and adds alias to eqbal queue.\n***\t\t\t\t\t\t\t Only updates mangorize alias if new actions\n***\t\t\t\t\t\t\t differ from already previously queued actions.\n***\t\t\t\t\t\t\t \n***\t\t\t\t\t\t\t NB: do() automatically prepends stand/ to your\n***\t\t\t\t\t\t\t\t mangorize alias\n***\t\n***\n***\t\t\t- doFree(...args)\n***\t\t\t\t- params: An array of at most alias_limit elements where each\n***\t\t\t\t\t\t  element is a single command to be placed in an alias.\n***\t\t\t\t\t\t  These commands should not consume bal/eq.\n***\n***\t\t\t\t\t\t  i.e. queue.doFree('get sovereigns', \n***\t\t\t\t\t\t\t\t\t\t\t'put sovereigns in pack');\n***\n***\t\t\t\t- behaviour: Appends provided parameters to melomash alias, up\n***\t\t\t\t\t\t\t to alias_limit actions and prepends alias to eqbal \n***\t\t\t\t\t\t\t queue.\n***\n***\t\t\t- dor(action)\n***\t\t\t\t- params: A single string comprised of one or more commands to\n***\t\t\t\t\t\t  set an alias to.\n***\n***\t\t\t\t\t\ti.e. queue.dor('construct concussionbomb');\n***\t\t\t\t\t\t\t queue.dor('prepare #####');\n***\t\t\t\t\t\t\t queue.dor('wield shield/wield sword/jab denizen');\n***\n***\t\t\t\t- behaviour: Sets repeater alias to value of provided parameter\n***\t\t\t\t\t\t\t and attempts to add repeater to the eqbal queue\n***\t\t\t\t\t\t\t every .25 seconds if repeater is not already\n***\t\t\t\t\t\t\t added to the queue.\n***\n***\t\t\t- dor_stop()\n***\t\t\t\t- params: N/A\n***\n***\t\t\t\t- behaviour: Terminates the dor() function's attempts to\n***\t\t\t\t\t\t\t repeatedly queue the repeater alias and clears the\n***\t\t\t\t\t\t\t repeater alias.\n***\n********************************************************************************\n*******************************************************************************/\n\nqueue = {\n    \n    // Upper limit on # of actions permitted in a IG alias\n    alias_limit: 20,\n\n\t// Stores most recently used queueing alias values\n\tmelomash: [],\t\t\t// for free (bal/eq - less) actions\n\tmangorize: null,\t\t// for actions requiring bal/eq\n    repeater_alias: null,\t// for repeating actions over several balances\n\n\t// Tracks if alias are currently queued\n\tmelomash_queued: false,\n\tmangorize_queued: false,\n    repeater_queued: false,\n    \n    // Holds id of interval used for dor function\n\t// Use in cancellation of repeating the action\n\trepeater_id: null,\n\n\t// Used for actions requiring bal/eq\n\t// Sets alias if actions differ from stored values\n\t// Adds alias to eqbal queue\n\tdo(...args) {\n\t\t// Stop any ongoing repeating actions\n\t\tthis.dor_stop();\n\n\t\tlet action = args.join('/');\n\n\t\t// Print error and exit if # params > alias_limit.\n\t\tif (args.length > this.alias_limit-1) {\n\t\t\tprint(`Error: Cannot queue stand/${action} , # actions > ${this.alias_limit}`, 'red');\n\t\t\treturn;\n\t\t}\n\n\t\t// Set alias and alias tracker\n\t\tif (this.mangorize !== action) {\n\t\t\tsend_command(`setalias mangorize stand/${action}`);\n\t\t}\n\n\t\t// Queue the alias for bal/eq actions\n\t\tif (!this.mangorize_queued) {\n\t\t\tsend_command('queue add eqbal mangorize');\n\t\t}\n\t},\n\n\t// Used for actions that don't require bal/eq\n\t// Sets alias if actions differ from stored values\n\t// Prepends alias to eqbal queue\n\tdoFree(...args) {\n\t\t// Print error and exit if # free actions in alias > alias_limit\n\t\tif (this.melomash.length > this.alias_limit || args.length + this.melomash.length > this.alias_limit) {\n\t\t\tsys.echo(`Error: Cannot free queue ${args.join('/')} , # queued free actions > ${this.alias_limit}`, 'red');\n\t\t\treturn;\n\t\t}\n\n\t\t// Set/Update alias and alias tracker\n\t\tlet prev_action = this.melomash.join('/');\n\t\tthis.melomash = [...this.melomash, ...args];\n\t\tlet new_action = this.melomash.join('/');\n\n\t\t// Update actual alias\n\t\tif (prev_action != new_action) {\n\t\t\tsend_command(`setalias melomash ${new_action}`);\n\t\t}\n\n\t\t// Prepends non-empty free action alias\n\t\tif (!this.melomash_queued && this.melomash.length > 0) {\n\t\t\tsend_command('queue prepend eqbal melomash');\n\t\t}\n\n\t},\n\n\t// Continuously repeat the given action parameter\n\tdor(action) {\n\t\t// Stop any previous repeating action if it existed\n\t\tthis.dor_stop();\n\n\t\t// Set/Update repeater alias and tracker\n\t\tif (this.repeater_alias != action) {\n\t\t\tsend_command(`setalias repeater ${action}`);\n\t\t}\n\n\t\t// Attempt to queue repeater alias every .25 seconds\n        // Only attempts to queue if not already queued\n\t\tthis.repeater_id = setInterval( () =>  {\n\t\t\tif (!this.repeater_queued) {\n\t\t\t\tsend_command('queue add eqbal repeater');\n\t\t\t}\n\t\t}, 250);\n\t},\n\n\t// Stop any ongoing repeating actions\n\tdor_stop() {\n\t\tif (this.repeater_id != null) {\n\t\t\tclearInterval(this.repeater_id);\t// Kills interval that repeatedly atempts to queue repeater alias\n\t\t}\n\t\tthis.repeater_id = null;\n\t\tthis.repeater_alias = null;\n\n\t\t// Clear the alias so nothing happens even if it gets queued again by timing mismatch\n\t\tsend_command('alias clear repeater');\n\t},\n\n};\n","items":[]},{"type":"alias","name":"Call OnLoad","enabled":true,"id":359,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"function","fn":"Queue"},{"action":"notify","notice":"Queueing package onLoad called.","notice_fg":"#ff0000","notice_bg":"#000000"}],"text":"load queue"},{"type":"alias","name":"Dor","enabled":true,"id":357,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"queue.dor(args[1]);"}],"text":"^dor (.+)$","items":[]},{"type":"alias","name":"Dor Stop","enabled":true,"id":341,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"queue.dor_stop();"}],"text":"dstop","items":[]},{"type":"trigger","name":"Alias Queued","enabled":true,"id":354,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^\\[System\\]: (?:Added|Prepended) (\\w+) to your eqbal queue.$","actions":[{"action":"script","script":"// Flags that the corresponding alias is queued\nqueue[`${args[1].toLowerCase()}_queued`] = true;"}],"items":[]},{"type":"trigger","name":"Alias Execution","enabled":true,"id":322,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^\\[System\\]: Running queued eqbal command: (MANGORIZE|MELOMASH|REPEATER)$","actions":[{"action":"script","script":"// Flag that the corresponding alias is not queued\nqueue[`${args[1].toLowerCase()}_queued`] = false;\n\nif (args[1] == \"MELOMASH\") {\n    queue.melomash = [];\n}"}],"items":[]},{"type":"trigger","name":"Cleared EQBAL","enabled":true,"id":326,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"[System]: Queued eqbal commands cleared.","actions":[{"action":"script","script":"// Reset bal/eq alias queueing tracker\nqueue.mangorize_queued = false;\n\n// Reset free action alias queueing trackers\nqueue.melomash_queued = false;\n\nqueue.melomash = [];\n\n// Reset repeating action alias queueing trackers\nqueue.repeater_queued = false;"}],"items":[]},{"type":"trigger","name":"Gagging: Alias Set","enabled":true,"id":197,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^Alias \"(mangorize|melomash|repeater)\" will now execute: \"(.+)\"$","actions":[{"action":"script","script":"gag_current_line();\n\n// Update alias content tracker\nqueue[args[1]] = args[2];"}],"items":[]},{"type":"trigger","name":"Gagging: System","enabled":true,"id":215,"matching":"begins","whole_words":true,"case_sensitive":true,"text":"[System]:","actions":[{"action":"gag"}],"items":[]},{"type":"trigger","name":"Gaggging: No Alias","enabled":true,"id":330,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You have no such alias. Use ALIASLIST|AL to view your aliases.","actions":[{"action":"gag"}],"items":[]},{"type":"trigger","name":"Gagging: Clear Alias","enabled":true,"id":331,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You have cleared alias \"repeater\".","actions":[{"action":"gag"}],"items":[]},{"type":"trigger","name":"Gagging: Repeater","enabled":true,"id":358,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"I'm sorry, I don't know what \"repeater\" does.","actions":[{"action":"gag"}],"items":[]}],"description":"Queuing framework"}