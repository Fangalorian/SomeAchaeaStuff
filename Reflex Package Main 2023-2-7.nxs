{"type":"group","name":"main","enabled":false,"items":[{"type":"function","name":"onLoad","enabled":true,"code":"// Place any code here you'd like to autorun when the system is loaded\n\nrun_function('Sys', {}, '-- main package --');\nrun_function('Queueing', {}, '-- main package --');\nrun_function('Battlerage Handler', {}, '-- main package --');\nrun_function('Redrawing', {}, '-- main package --');\nrun_function('Tattoo Checking', {}, '-- main package --');\nrun_function('Runewarden', {}, '-- main package --');\nrun_function('Dragonform', {}, '-- main package --');\nrun_function('Druid', {}, '-- main package --');"},{"type":"function","name":"onGMCP","enabled":true,"code":"// Place any code here you'd like to run when a GMCP message is received\n// - The GMCP message is received as \"args.gmcp_method\" and \"args.gmcp_args\"\n\n\n/***************************************************************************\n***\t\t\tBattlerage Handler Section\n***************************************************************************/\n\n// Get Target information for Battlerage Handler\nif (args.gmcp_method == 'IRE.Target.Info') {\n    brh.target_stats(args.gmcp_args);\n}\n\nif (args.gmcp_method == 'Char.Vitals') { \n    brh.set_rage(args.gmcp_args);\n}\n"},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"// Clickable text example. Do NOT erase.\n/*\n\ntest_function = () => {print('Test function fired', 'orange')};\n\nlet line = `<p><a class=\"mxp_send\" onclick=\"test_function();\" style=\"color: #ccc; cursor:pointer;\">This is a test.</a></p>`\n\now_Write(\"#output_main\", line);\nprint(GMCP.Status.class);\nprint(GMCP.Status.race);\n*/\n//queue.do('hydra secrete prefarar', 'hydra bite &tar');\n//queue.do('swing staff', 'hydra roar &tar', 'hydra legclamp left');\n//queue.do('hydra armclamp &tar right');\nprint(print);"}],"text":"test","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"function","enabled":true,"fn":"onLoad"},{"type":"script","enabled":true,"script":"sys.echo(\"Main package onLoad function called\", '#ffe866');"}],"text":"load main","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Parrying","enabled":true,"actions":[{"type":"script","enabled":true,"script":"send_command(`queue prepend bal parry ${combat.limbs[args[1]]}`);"}],"text":"^p(ll|la|rl|ra|h|tt|n)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"function","name":"Sys","enabled":true,"code":"sys = {\n    armour: {\n        'Runewarden': 'fullplate',\n        'Druid': 'chainmail',\n    },\n    \n    class_groups: {\n        'Runewarden': reflex_find_by_name('group', 'Runewarden', true, false, '-- main package --'),\n        'Black Dragon': reflex_find_by_name('group', 'Dragonform', true, false, '-- main package --'),\n        'Druid': reflex_find_by_name('group', 'Druid', true, false, '-- main package --'),\n    },\n    \n    echo(...args) {\n        let txt_length = args.length;\n        let msg = $('<span></span>', {class:\"mono\"});\n        $('<span></span>',{class:'timestamp mono no_out'}).text(`${client.getTimeMS()} `).appendTo(msg);\n        $('<span></span>',{style:'color:DodgerBlue'}).text('[').appendTo(msg);\n        $('<span></span>',{style:'color:OrangeRed'}).text('Atom').appendTo(msg);\n        $('<span></span>',{style:'color:DodgerBlue'}).text(']: ').appendTo(msg);\n\n        if (txt_length == 1) {\n            $('<span></span>',{style:'color:White'}).text(args[0]).appendTo(msg);\n        }\n        else if (txt_length % 2 == 0) {\n            for (let idx = 0; idx < txt_length; idx += 2) {\n                $('<span></span>',{style:`color:${args[idx+1]}`}).text(args[idx]).appendTo(msg);\n            }\n        }\n        else {\n            $('<span></span>',{style:'color:Red'}).text('Error: # sys.echo params must be divisible by 2.').appendTo(msg);\n        }\n\n        print(msg[0].outerHTML);\n\t},\n    \n    swap_class() {\n        if (GMCP.Status.class == \"Runewarden\") {\n            reflex_disable(this.class_groups['Druid']);\n            reflex_disable(this.class_groups[\"Black Dragon\"]);\n            reflex_enable(this.class_groups[\"Runewarden\"]);\n        }\n        else if (GMCP.Status.class == \"Black Dragon\") {\n            reflex_disable(this.class_groups['Druid']);\n            reflex_disable(this.class_groups[\"Runewarden\"]);\n            reflex_enable(this.class_groups[\"Black Dragon\"]);\n        }\n        else if (GMCP.Status.class = 'Druid') {\n            reflex_disable(this.class_groups['Runewarden']);\n            reflex_disable(this.class_groups['Black Dragon']);\n            reflex_enable(this.class_groups['Druid']);\n        }\n    },\n    \n    toProperCase(str) {\n      return str.replace(\n        /\\w\\S*/g,\n        function(txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        }\n      );\n    }\n};\n\nsys.swap_class();"},{"type":"function","name":"Redrawing","enabled":true,"code":"// Modifies Nexus look to get rid of tabs on the output windows\nredraw_interface = (function() {\n    var cached_function = redraw_interface;\n    return function() {\n        var result = cached_function.apply(this, arguments);\n        $('#tab_main_output').hide();\n        $('#tab_room').hide();\n        $('#tab_map').hide();\n        $('#tab_all_comm').hide();\n        \n        $('#tab_content_main_output').css('height', 'calc(100% - 13px)');\n        $('#tab_content_room').css('height', 'calc(100% - 13px)');\n        $('#tab_content_map').css('height', 'calc(100% - 13px)');\n        $('#tab_content_all_comm').css('height', 'calc(100% - 13px)');\n    };\n})();\n\nredraw_interface();\nredraw_interface();"},{"type":"group","name":"General Actions","enabled":true,"actions":[],"items":[{"type":"alias","name":"Logging Off","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'stand',\n    'inrift all',\n    'put sovereigns in pack',\n    'quit'\n);"}],"text":"qq","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Journal AFK","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'get 495801 from pack',\n    'write journal'\n);"}],"text":"afk","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Returning from Journal AFK","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.doFree('put 495801 in pack');"}],"text":"You do not make any changes.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"alias","name":"Move on Bal","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(args[1]);"}],"text":"^m (n|ne|e|se|s|sw|w|nw|u|d|in|out)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Duanathar/an","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let say = args[1] ? 'duanathar' : 'duanathara';\n\nqueue.do(\n    'get wings from pack',\n    'wear wings',\n    `say ${say}`,\n    'remove wings',\n    'put wings in pack'\n);"}],"text":"^dua(a)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Dash/Glide/Gallop","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action = GMCP.Status.race == 'Black Dragon' ? 'glide' : 'gallop';\nif (GMCP.Status.class == 'Blademaster')\n    action = 'dash';\nlet dist = args[1] == undefined ? '' : args[1];\nqueue.do(`${action} ${args[2]} ${dist}`);"}],"text":"^run\\s?(\\d+)? (n|ne|e|se|s|sw|w|nw|u|d|in|out)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Inrift all","enabled":true,"actions":[{"type":"command","enabled":true,"command":"inrift all","prefix_suffix":true}],"text":"inra","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"group","name":"Sovereign management","enabled":true,"actions":[],"items":[{"type":"alias","name":"Get Gold from Ground","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.doFree(\n    'get sovereigns',\n    'put sovereigns in pack'\n);\n"}],"text":"gg","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Purchasing Items","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'get sovereigns from pack',\n    `buy ${args[1]}`\n);"}],"text":"^purchase (.+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Refilling rift/vial","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'get sovereigns from pack',\n    `fill ${args[1]} with ${args[2]}`\n);"}],"text":"^refill (rift|empty) with (\\w+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Pack Rewearing","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.doFree('wear 85785');"}],"text":"^You remove a wyrmskin pack\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Gold Safekeeping","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.doFree('put sovereigns in 85785');"}],"text":"^You get (?:\\d+) gold (?:sovereigns|sovereign) from a wyrmskin pack\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"trigger","name":"Auto-teaching","enabled":true,"actions":[{"type":"command","enabled":true,"command":"ok"}],"text":"'OK' to commence the lesson.","matching":"substring","whole_words":true,"case_sensitive":true},{"type":"alias","name":"Farsee","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let command;\nif (args.length > 1) {\n    command = `farsee ${args[1]}`;\n}\nelse {\n    command = 'farsee';\n}\nqueue.do(command);"}],"text":"^find\\s?(\\w+)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Leave Nishnatoba","enabled":true,"actions":[{"type":"command","enabled":true,"command":"goto 26329","prefix_suffix":true}],"text":"nish","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]},{"type":"group","name":"Earrings","enabled":true,"actions":[],"items":[{"type":"alias","name":"Travel to Austere","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('travel to austere');"}],"text":"aust","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Earringed!","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (raid.relaying) {\n    let loc = mapdb_v.room_gmcp.name;\n\tlet area = mapdb_v.room_gmcp.area;\n    send_command(`pt Traveled to ${args[1]} at ${loc} in ${area}!`);\n}"}],"text":"^You think of your true love, (\\w+), and travel to (him|her)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Bashing BRage","enabled":true,"actions":[],"items":[{"type":"function","name":"Battlerage Handler","enabled":true,"code":"// Create and define battlerage handler namespace\n// Enables automatic usage of battlerage abilities on bashing attack\n// and when battlerage balance is recovered\n\n// Battlerage Handler\nbrh = {\n\t// Global configuration settings\n\tactivated: false,\n\n\t// Stores denizen target desc and current hp\n\ttarget_desc: null,\n\ttarget_hp: null,\n\n\t// Stores current rage value and syntax/costs/settings\n\trage: 0,\n\tabs: null,\n\n\t// Stores balances of each rage ability\n\tbals: {\n\t\tab1: true,\n\t\tab2: true,\n\t\tab3: true,\n\t\tab4: true,\n\t\tab5: true,\n\t},\n\n\t// Stores class specific rage syntax/costs/settings\n\t// Ability arrays contain: command, cost, use\n\trage_table: {\n\t\t'Runewarden': {\n\t\t\tab1: ['collide &tar',      14, true],\n\t\t\tab2: ['etch rune at &tar', 25, true],\n\t\t\tab3: ['bulwark',\t   28, true],\n\t\t\tab4: ['safeguard me',      35, false],\n\t\t\tab5: ['onslaught &tar',    36, true],\n\t\t\tabR: ['fragment &tar',     17, true],\n\t\t\tattack: 'stand/wield warhammer/battlefury focus speed/slaughter &tar/consider &tar',\n\t\t},\n\n\t\t'Blademaster': {\n\t\t\tab1: ['leapstrike &tar',   14, true],\n\t\t\tab2: ['nerveslash &tar',   22, true],\n\t\t\tab3: ['strike &tar head',  25, true],\n\t\t\tab4: ['shin daze &tar',    26, true],\n\t\t\tab5: ['spinslash &tar',    36, true],\n\t\t\tabR: ['shin shatter &tar', 17, true],\n\t\t\tattack: 'stand/drawslash &tar/consider &tar',\n\t\t},\n\n\t\t'Black Dragon': {\n\t\t\tab1: ['dragonspit &tar',   14, true],\n\t\t\tab2: ['dragonsting &tar',  25, true],\n\t\t\tab3: ['corrode &tar',      25, true],\n\t\t\tab4: ['dragonfear &tar',   29, false],\n\t\t\tab5: ['override &tar',     36, true],\n\t\t\tabR: ['dissolve &tar',     17, true],\n\t\t\tattack: 'stand/wield shield left/gut &tar/summon acid/consider &tar',\n\t\t},\n\n\t\t'earth Elemental Lord': {\n\t\t\tab1: ['terran smash &tar',        14, true],\n\t\t\tab2: ['manifest magmaburst &tar', 25, true],\n\t\t\tab3: ['terran rampart me',        30, false],\n\t\t\tab4: ['manifest rockfall &tar',   33, true],\n\t\t\tab5: ['terran flurry &tar',       36, true],\n\t\t\tabR: ['terran charge &tar',       17, true],\n\t\t\tattack: 'stand/wield shield left/terran pulverise &tar/consider &tar',\n\t\t},\n        \n        'Druid': {\n            ab1: ['strangle &tar',        \t  14, true],\n\t\t\tab2: ['qstaff glare &tar',\t\t  14, true],\n\t\t\tab3: ['reclamation redeem &tar',  22, false],\n\t\t\tab4: ['sear &tar',\t \t\t      25, true],\n\t\t\tab5: ['ravage &tar',       \t\t  36, true],\n\t\t\tabR: ['vinecrack &tar',\t          17, true],\n\t\t\tattack: 'stand/wield shield left/terran pulverise &tar/consider &tar',\n        }\n\t},\n\n\t// Sets/Updates denizen target description and health from GMCP\n\t// EX: target_stats(args.gmcp_args)\n\ttarget_stats(info) {\n\t\tif (info.hasOwnProperty('short_desc')) {\n\t\t\tthis.target_desc = info.short_desc;\n\t\t}\n\t\tif (info.hasOwnProperty('hpperc')) {\n\t\t\tthis.target_hp = parseInt(info.hpperc);\n\t\t}\n\t},\n\n\t// Sets battlerage using GMCP\n\t// EX: set_rage(args.gmcp_args);\n\tset_rage(info) {\n\t\tthis.rage = parseInt(info.charstats[1].substring(6));\n\t},\n\n\t// Set the abs variable to the static stored values for the class\n\tupdate_abilities() {\n\t\t// Make a deep copy so we can manipulate without worry\n\t\tthis.abs = JSON.parse(JSON.stringify(this.rage_table[GMCP.Status.class]));\n\t\tif (this.abs.abR[2]) {\n\t\t\tthis.adjust_costs();\n\t\t}\n\t},\n\n\t// Adjust current rage costs for razing\n\tadjust_costs() {\n\t\tif (this.abs.abR[2]) {\n\t\t\tthis.abs.ab1[1] += this.abs.abR[1];\n\t\t\tthis.abs.ab2[1] += this.abs.abR[1];\n\t\t\tthis.abs.ab3[1] += this.abs.abR[1];\n\t\t\tthis.abs.ab4[1] += this.abs.abR[1];\n\t\t\tthis.abs.ab5[1] += this.abs.abR[1];\n\t\t}\n\t\telse {\n\t\t\tthis.update_abilities();\n\t\t}\n\t},\n\n\t// Sets balance for specified rage abilities to true\n\t// EX: recovered('Dragonfear') || recovered('Collide')\n\trecovered(ability) {\n    \tswitch(ability) {\n    \t\tcase 'Collide':\n    \t\tcase 'Leapstrike':\n    \t\tcase 'Dragonspit':\n\t\t\tcase 'Smash':\n        \t\tthis.bals.ab1 = true;\n        \t\tbreak;\n    \t\tcase 'Etch':\n    \t\tcase 'Nerveslash':\n    \t\tcase 'Dragonsting':\n\t\t\tcase 'Magmaburst':\n        \t\tthis.bals.ab2 = true;\n        \t\tbreak;\n    \t\tcase 'Bulwark':\n    \t\tcase 'Headstrike':\n    \t\tcase 'Corrode':\n\t\t\tcase 'Rampart':\n        \t\tthis.bals.ab3 = true;\n        \t\tbreak;\n    \t\tcase 'Safeguard':\n    \t\tcase 'Daze':\n    \t\tcase 'Dragonfear':\n\t\t\tcase 'Rockfall':\n        \t\tthis.bals.ab4 = true;\n        \t\tbreak;\n    \t\tcase 'Onslaught':\n    \t\tcase 'Spinslash':\n    \t\tcase 'Override':\n\t\t\tcase 'Flurry':\n        \t\tthis.bals.ab5 = true;\n        \t\tbreak;\n    \t}\n\t},\n\n\t// Uses BRage abilities if balance and rage costs are met\n\tuse_rage() {\n\t\tif (this.abs.ab1[2] && this.bals.ab1 && this.rage >= this.abs.ab1[1]) {\n\t\t\tsend_command(this.abs.ab1[0]);\n\t\t\tconsole.log(this.abs.ab1[0]);\n\t\t}\n\t\telse if (this.abs.ab2[2] && this.bals.ab2 && this.rage >= this.abs.ab2[1]) {\n\t\t\tsend_command(this.abs.ab2[0]);\n\t\t\tconsole.log(this.abs.ab2[0]);\n\t\t}\n\t\telse if (this.abs.ab3[2] && this.bals.ab3 && this.rage >= this.abs.ab3[1]) {\n\t\t\tsend_command(this.abs.ab3[0]);\n\t\t\tconsole.log(this.abs.ab3[0]);\n\t\t}\n\t\telse if (this.abs.ab4[2] && this.bals.ab4 && this.rage >= this.abs.ab4[1]) {\n\t\t\tsend_command(this.abs.ab4[0]);\n\t\t\tconsole.log(this.abs.ab4[0]);\n\t\t}\n\t\telse if (this.abs.ab5[2] && this.bals.ab5 && this.rage >= this.abs.ab5[1]) {\n\t\t\tsend_command(this.abs.ab5[0]);\n\t\t\tconsole.log(this.abs.ab5[0]);\n\t\t}\n\t},\n\n\t// Uses BRage to raze shields if rage cost is met\n\tuse_raze() {\n\t\tif (this.abs.abR[2] && this.rage >= this.abs.abR[1]) {\n\t\t\tsend_command(this.abs.abR[0]);\n\t\t\tconsole.log(this.abs.abR[0]);\n\t\t}\n\t},\n\n};\n\n// Set internal variables on startup\nbrh.update_abilities();\n"},{"type":"alias","name":"BRH Status","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (brh.activated) {\n    sys.echo('Battlerage Handler', 'White', ' Enabled', 'MediumSeaGreen');\n}\nelse {\n    sys.echo('Battlerage Handler', 'White', ' Disabled', 'PaleVioletRed');\n}"}],"text":"bashing","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Battlerage On/Off","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let state = args[1] == 'on' ? true : false;\nbrh.activated = state;\nif (brh.activated) {\n    sys.echo('Battlerage Handler', 'White', ' Enabled', 'MediumSeaGreen');\n}\nelse {\n    sys.echo('Battlerage Handler', 'White', ' Disabled', 'PaleVioletRed');\n}"}],"text":"^bashing (on|off)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Battlerage Raze On/Off","enabled":false,"actions":[{"type":"script","enabled":true,"script":"let state = args[1] == 'on' ? true : false;\nbrh.razing(state);"}],"text":"^bashing raze (on|off)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Bashing Attack (RW)","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.dor(brh.abs.attack);"}],"text":"bash","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"group","name":"BRH Class Changes","enabled":true,"actions":[],"items":[{"type":"trigger","name":"BRH Dragonform","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.update_abilities();"}],"text":"With an ear-splitting roar, you rear back your draconic head and scream out your triumph.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Lesserform","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.update_abilities();"}],"text":"Your draconic form melts away, leaving you suddenly weaker and more vulnerable.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Prevail","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.update_abilities();"}],"text":"As the earth rises to clad your growing form in a skin of stone, you scream out in triumph, the very blood of Earth surging through your granite veins. By the will of Garash, Earth is yours to command!","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Class Swap","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.update_abilities();"}],"text":"^You are now a member of the (\\w+) class\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Forsake","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.update_abilities();"}],"text":"Primal earth abandons you, your flawed physicality reasserting itself once more as you forsake your primordial form.","matching":"exact","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Runewarden BRH","enabled":true,"actions":[],"items":[{"type":"trigger","name":"Successful Slaughter","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"lightseagreen\", \"\");\n\nif (brh.activated && brh.target_hp > 20) {\n    brh.use_rage();\n}"}],"text":"^Drawing back (?:.+), you unleash a flesh-mincing blow at (?:.+).$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Collide","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab1 = false;"}],"text":"^You charge at (.+), slamming into (\\w+) and throwing (\\w+) back\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Etch","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab2 = false;"}],"text":"^You trace the outline of a rune in the air with (.+)\\. The edges catch fire as it hurtles towards (.+), clipping (\\w+) slightly as it dissipates\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Bulwark","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab3 = false;"}],"text":"The runes on your armour flare brightly as you adopt a defensive stance.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Onslaught","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab5 = false;"}],"text":"^You unleash a ferocious onslaught on (.+), relentlessly pounding (\\w+) with (.+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Fragment","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\ncombat.attack(current_text(), \"slateblue\", \"\");"}],"text":"^You strike at (.+)'s translucent shield with (.+), drawing the outline of a rough rune that detonates, consuming the shield\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Blademaster BRH","enabled":true,"actions":[],"items":[{"type":"trigger","name":"BRH Drawslash","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"lightseagreen\", \"\");\n\nif (brh.activated && brh.target_hp > 20) {\n    brh.use_rage();\n}"}],"text":"^With expert precision, you draw (.+) from its scabbard and unleash a vicious slash towards (.+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Leapstrike","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab1 = false;"}],"text":"^A Shin-enhanced leap flings you high into the air. You extend one knee downwards as you begin to fall, squarely striking (.+) and driving (\\w+) to the ground as you land\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Nerveslash","enabled":true,"actions":[{"type":"script","enabled":true,"script":"\nbrh.bals.ab2 = false;"}],"text":"^You lightly stab (.+) in several key locations with your blade, causing (\\w+) to slump weakly\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Headstrike","enabled":true,"actions":[{"type":"script","enabled":true,"script":"\nbrh.bals.ab3 = false;"}],"text":"^You deliver a glancing blow to (\\w+) head\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Daze","enabled":true,"actions":[{"type":"script","enabled":true,"script":"\nbrh.bals.ab4 = false;"}],"text":"^You hurl a precise blast of Shin energy at (.+) eyes\\.$","matching":"substring","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Spinslash","enabled":true,"actions":[{"type":"script","enabled":true,"script":"\nbrh.bals.ab5 = false;"}],"text":"^You twist in a tight circle, slashing (.+) with each spin\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Shin Shatter","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\ncombat.attack(current_text(), \"slateblue\", \"\");"}],"text":"^You unleash a burst of Shin energy at (.+), tearing apart (\\w+) translucent shield\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Black Dragon BRH","enabled":true,"actions":[],"items":[{"type":"trigger","name":"Gut confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"slategrey\", \"\");\n\nif (brh.activated && brh.target_hp > 20) {\n    brh.use_rage();\n}"}],"text":"^You rip into (.+) with your massive, deadly claws\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Dragonspit","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab1 = false;"}],"text":"^You spit a stream of acidic venom at (.+) who writhes in agony as the spittle seeps into (\\w+) skin\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Dragonsting","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab2 = false;"}],"text":"^You swing your mighty tail around, stabbing (.+) with an acid-covered spine\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Corrode","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab3 = false;"}],"text":"^You open your gigantic maw and spew acid on (\\w+)\\. (\\w+) dodges to the side and is only partially covered by the corrosive slime\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Override","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab5 = false;"}],"text":"^You barrel into (.+) and knock (\\w+) to the ground before stomping over (\\w+) prone form\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Dissolve","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\ncombat.attack(current_text(), \"slateblue\", \"\");"}],"text":"^You bathe (.+)'s translucent shield in your noxious breath, dissolving it\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Earthlord BRH","enabled":true,"actions":[],"items":[{"type":"trigger","name":"BRH Pulverise","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(),'sandybrown', '');\n\nif (brh.activated && brh.target_hp > 20) {\n    brh.use_rage();\n}"}],"text":"^You rain a flurry of blows down upon (.+) with your stone fists\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Smash","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab1 = false;"}],"text":"^You bring one of your stone fists down upon (?:.+) in a smashing blow\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Magmaburst","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab2 = false;"}],"text":"^You call up a column of magma to strike down (?:.+), but (?:he|she) steps back away from the danger\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Rockfall","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab4 = false;"}],"text":"^You manifest rocks directly above (?:.+), burying (?:him|her) under a cascading hammer of stone\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Flurry","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.bals.ab5 = false;"}],"text":"^Imbuing your form with the might of earth, you launch a terrible assault upon (?:.+), raining blow after blow down upon (?:him|her) with your empowered fists\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Charge","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"slateblue\", \"\");"}],"text":"^Wreathing yourself in magma, you charge into (?:.+), smashing through the magical shield that surrounds (?:him|her) with the might of your stone-forged form\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"trigger","name":"BRH Ability Recovery1","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.recovered(args[1]);"}],"text":"^You can use (\\w+) again\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Ability Recovery2","enabled":true,"actions":[{"type":"script","enabled":true,"script":"brh.recovered(args[1]);"}],"text":"^Your (\\w+) ability could be used again but you lack the necessary Rage\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Regained: Bal","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (brh.activated && brh.target_hp > 20) {\n    brh.use_rage();\n}"}],"text":"You can use another Battlerage ability again","matching":"begins","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Target Shielded","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (/\\d/.test(GMCP.Target) && brh.target_desc == args[1] && brh.activated) {\n    brh.use_raze();\n}"}],"text":"^A nearly invisible magical shield forms around (.+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"BRH Denizen Killed","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.display_notice(\n    \"---> {\", \"red\", \"\",\n    \"SLAIN\", \"khaki\", \"\",\n    \"}: \", \"red\", \"\",\n    args[1], \"khaki\", \"\"\n);\nqueue.dor_stop();\nqueue.doFree('get sovereigns', 'put sovereigns in pack');"}],"text":"^You have slain (.+), retrieving the corpse\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Class Switching","enabled":true,"actions":[],"items":[{"type":"trigger","name":"Swapped Class","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.swap_class();\nqueue.do(\n    'remove armour',\n    'put armour in sporran',\n    `get ${sys.armour[args[1]]} from sack`,\n    'wear armour'\n);"}],"text":"^You are now a member of the (\\w+) class\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Prevail Earth Begins","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo(\"Prevailing initiated.\", 'white');"}],"text":"Placing your hand upon the ground, you reach out with your attuned senses to feel the lifeblood of the earth surging deep below, its radiance glowing bright in your mind's eye.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Prevail Earth Stopped","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Prevailing ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');\nsys.echo('Prevailing ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');\nsys.echo('Prevailing ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');"}],"text":"You cease prevailing upon your elemental might.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Prevail Earth Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.doFree(\n    'put armour in sack'\n);"}],"text":"As the earth rises to clad your growing form in a skin of stone, you scream out in triumph, the very blood of Earth surging through your granite veins. By the will of Garash, Earth is yours to command!","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Forsake Earth Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.doFree(\n    `get ${sys.armour[GMCP.Status.class]} from sack`,\n    'wear armour'\n);\nif (GMCP.Status.class == 'Druid') {\n        queue.doFree('wield quarterstaff');\n}"}],"text":"Primal earth abandons you, your flawed physicality reasserting itself once more as you forsake your primordial form.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Dragonform Begins","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo(\"Dragonforming initiated.\", 'white');"}],"text":"With a grimness born of determination, you begin to unleash the Dragon that is now so much a part of the fabric of your soul. A black light begins to shine through from within you.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Dragonform Stopped","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Dragonforming ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');\nsys.echo('Dragonforming ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');\nsys.echo('Dragonforming ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');"}],"text":"You cease your transformation into Dragonform.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Dragonform Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.doFree(\n    'put armour in sack'\n);\n\nsys.swap_class();"}],"text":"With an ear-splitting roar, you rear back your draconic head and scream out your triumph.","matching":"substring","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Lesserformed","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (GMCP.Status.race == \"Tash'la\") {\n    queue.doFree(\n        `get ${sys.armour[GMCP.Status.class]} from sack`,\n        'wear armour'\n    );\n    if (GMCP.Status.class == 'Druid') {\n        queue.doFree('wield quarterstaff');\n    }\n}\n\nsys.swap_class();"}],"text":"Your draconic form melts away, leaving you suddenly weaker and more vulnerable.","matching":"exact","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Class Namespaces","enabled":true,"actions":[],"items":[{"type":"function","name":"Runewarden","enabled":true,"code":"// Create and define runewarden namespace\n// Holds variables/functions relevant to runewarden aliases/triggers\n\nrunie = {\n\tengaged   : false,\n\tfocus     : 'speed',\n\tarrow_dir : null,\n\tobserved  : [],\n\trelayed   : false,\n\tvenom     : 'curare',\n\thammer    : 'wield warhammer',\n\tbastard   : 'wield bastard',\n\tupset     : 'battlefury upset &tar',\n\n\t// Pass to setTimeout for relaying falcon observations to party\n\tobservation() {\n\t\t// Operate so long as someone is detected\n\t\tif (runie.observed.length > 0) {\n\t\t\t// Build string of detected names\n\t\t\tlet relay = runie.observed.join(', ');\n\n\t\t\t// Relay detected names to party tells\n\t\t\tif (!runie.relayed && raid.relaying) {\n\t\t\t\tsend_command(`setalias fobsv pt Outdoors in Area:/pt (${runie.observed.length}) ${relay}`);\n\t\t\t\tsend_command('fobsv');\n\t\t\t\trunie.relayed = true;\n\t\t\t}\n\n\t\t\t// Disable the reflex this function is being called in\n\t\t\tlet reflex = reflex_find_by_name('trigger', 'Falcon Observe Body', true, false, '-- main package --');\n            reflex_disable(reflex);\n\t\t}\n\n\t},\n\n\t// Build and carry out an attack on a target\n\tswing(atk, weapon='hammer', limb='',upset=false,epteth=false,fury=false,ow=false,idb=false) {\n\t\tif (weapon != 'hammer') {\n\t\t\tif (limb == 'legs' && epteth)\n\t\t\t\tthis.venom = 'epteth';\n\t\t\telse if (limb == 'arms' && epteth)\n\t\t\t\tthis.venom = 'epseth';\n\t\t\telse\n\t\t\t\tthis.venom = 'curare';\n\t\t}\n\t\telse {\n\t\t\tthis.venom = '';\n\t\t}\n\n\t\tlet actions = [\n\t\t\t'vault stubbs',\n\t\t\t'falcon slay &tar',\n\t\t\tweapon == 'hammer' ? this.hammer : this.bastard,\n\t\t];\n\n\t\tif (!upset && !ow && ! idb) {\n\t\t\tactions.push(`battlefury focus ${this.focus}`);\n\t\t}\n\n\t\tactions.push(`${atk} &tar ${limb} ${this.venom}`);\n\n\t\tif (upset) {\n\t\t\tactions.push(this.upset);\n\t\t}\n\n\t\tactions.push('assess');\n\n\t\tif (fury) {\n\t\t\tactions.push('fury on');\n\t\t}\n\n\t\tif (this.engaged) {\n\t\t\tactions.push('engage');\n\t\t}\n\n\t\tqueue.do.apply(queue, actions);\n\t},\n};\n"},{"type":"function","name":"Dragonform","enabled":true,"code":"dragon = {\n    \n    curse: null,\n    venom: null,\n    stream_dir: null,\n    \n    affs: {\n        a: 'paralysis', // slike\n        i: 'impatience', // curare\n        w: 'weariness',\t// curare\n        p: 'stupidity', // curare\n        k: 'asthma', // curare\n        s: 'paralysis', // gecko\n        c: 'paralysis', // xentio\n    },\n    \n    venoms: {\n        a: 'slike',\n        i: 'curare',\n        w: 'curare',\n        p: 'curare',\n        k: 'curare',\n        s: 'gecko',\n        c: 'xentio',\n    },\n    \n    ven_affs: {\n        slike: 'anorexia',\n        gecko: 'slickness',\n        xentio: 'clumsiness',\n    },\n    \n    \n};"},{"type":"function","name":"Druid","enabled":true,"code":"druid = {\n    leap: ['Cheetah', 'Hyena', 'Gorilla', 'Wyvern'],\n    sprint: ['Cheetah', 'Icewyrm'],\n    might: ['Icewyrm', 'Wyvern', 'Hydra'],\n    fitness: ['Wolf', 'Cheetah', 'Hyena', 'Elephant', 'Wyvern', 'Hydra'],\n    block: ['Bear', 'Elephant', 'Hydra'],\n    hydraBal: true,\n    refilling: false,\n    \n    secretion: {\n        d: 'hydra secrete prefarar',\n        b: 'hydra secrete prefarar',\n        n: 'hydra secrete nechamandra',\n    },\n    \n    second: {\n        d: 'hydra snap &tar',\n        b: 'hydra roar &tar',\n        n: 'hydra snap &tar',\n    },\n    \n    clamp: {\n        ll: 'hydra legclamp &tar left',\n        rl: 'hydra legclamp &tar right',\n        la: 'hydra armclamp &tar left',\n        ra: 'hydra armclamp &tar right',\n    },\n};"}]},{"type":"group","name":"Runewarden","enabled":false,"actions":[],"items":[{"type":"alias","name":"Fitness","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('fitness');"}],"text":"fit","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Panic Actives","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'fitness',\n    'continuation',\n    'discipline'\n);"}],"text":"shit","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"group","name":"Bow Shooting","enabled":true,"actions":[],"items":[{"type":"alias","name":"Aim Arrow","enabled":true,"actions":[{"type":"script","enabled":true,"script":"runie.arrow_dir = args[1];\n\nqueue.do(\n    'wield bow',\n    `aim &tar ${runie.arrow_dir}`\n);"}],"text":"^sn (\\w+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Shoot Arrow","enabled":true,"actions":[{"type":"script","enabled":true,"script":"send_command(`shoot ${GMCP.Target} ${runie.arrow_dir}`);"}],"text":"^You feel confident that your aim is accurate\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Falcon Handling","enabled":true,"actions":[],"items":[{"type":"alias","name":"Falcon Report","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('falcon report');"}],"text":"frk","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Falcon Observe","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('falcon observe');"}],"text":"fo","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Falcon Track","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('falcon track &tar');"}],"text":"ft","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Falcon Circle","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('falcon circle');"}],"text":"fc","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Falcon Recall","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('falcon recall');"}],"text":"fr","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Falcon Assess","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('falcon assess');"}],"text":"fa","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Falcon Hunt","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('falcon hunt');"}],"text":"fh","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Falcon Observe Begin","enabled":true,"actions":[{"type":"script","enabled":true,"script":"// Reset the list of items observed by the falcon and whether it's been relayed\nrunie.observed = [];\nrunie.relayed = false;\nconsole.log('Falcon Observe: '+runie.observed);\nreflex_enable(reflex_find_by_name(\"trigger\", \"Falcon Observe Body\", true, false,\n    \"-- main package --\"));"}],"text":"Your falcon reports seeing the following people in its area:","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Falcon Observe Body","enabled":false,"actions":[{"type":"script","enabled":true,"script":"runie.observed.push(args[1]);\nconsole.log('Falcon Observe2: '+runie.observed);\nsetTimeout(runie.observation, 10);"}],"text":"^(\\w+)(?:\\s+)(?:\\d+) health out of (?:\\d+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Propping","enabled":true,"actions":[],"items":[{"type":"alias","name":"Propping totem","enabled":true,"actions":[{"type":"script","enabled":true,"script":"\nlet totem = 134896;\nqueue.do(\n    'curing priority defence rebounding reset',\n    'curing mount clear',\n    'dismount',\n    `get ${totem} from pack`,\n    `wield ${totem}`,\n    'stand totem'\n);"}],"text":"prop","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Begin Prop","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('You are ', 'white', 'NOW PROPPING!', 'MediumSeaGreen');"}],"text":"You strain to hold a tall totem pole in an upright position for your enemies to see.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Cease Prop","enabled":true,"actions":[{"type":"script","enabled":true,"script":"for (let idx = 0; idx < 3; idx++)\n    sys.echo('You have ', 'white', 'STOPPED PROPPING!', 'PaleVioletRed');"}],"text":"You cease to prop up a tall totem pole.","matching":"exact","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Two-Hander","enabled":true,"actions":[],"items":[{"type":"alias","name":"Battlefury Focus","enabled":true,"actions":[{"type":"script","enabled":true,"script":"runie.focus = args[1] == 's' ? 'speed' : 'precision';\n\nsys.echo('Battlefury Focus ', 'white', runie.focus.toUpperCase(), \"orange\");"}],"text":"^f(s|p)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Continuation","enabled":true,"actions":[{"type":"command","enabled":true,"command":"battlefury continuation","prefix_suffix":true}],"text":"con","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Discipline","enabled":true,"actions":[{"type":"command","enabled":true,"command":"discipline","prefix_suffix":true}],"text":"dis","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"group","name":"Attacks","enabled":true,"actions":[],"items":[{"type":"alias","name":"Raze Shields","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (/\\d/.test(GMCP.Target))\n\tqueue.do(\n        'wield bastard',\n        'battlefury focus speed',\n        'carve &tar',\n        'consider &tar'\n    );\nelse\n    runie.swing('carve', 'sword');"}],"text":"str","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Overhand","enabled":true,"actions":[{"type":"script","enabled":true,"script":"runie.swing('overhand', args[1] == undefined ? 'hammer' : 'sword');"}],"text":"^(s)?ohd$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Underhand","enabled":true,"actions":[{"type":"script","enabled":true,"script":"runie.swing('underhand', args[1] == undefined ? 'hammer' : 'sword');"}],"text":"^(s)?und$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Pulverise/Hew","enabled":true,"actions":[{"type":"script","enabled":true,"script":"runie.swing(\n    args[1] == 'b' ? 'pulverise' : 'hew',\n    args[1] == 'b' ? 'hammer' : 'sword',\n    combat.limbs[`${args[2]}${args[3] == 'a' ? 'a' : 'l'}`],\n    args[3] == 'u' ? true : false\n);"}],"text":"^(b|s)(l|r)(l|a|u)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Devastate","enabled":true,"actions":[{"type":"script","enabled":true,"script":"runie.swing('devastate', 'sword', args[1] == 'a' ? 'arms' : 'legs', true, true);"}],"text":"^d(a|l)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Impale","enabled":true,"actions":[{"type":"script","enabled":true,"script":"runie.swing('impale', 'sword', '', false, false, true, false, true);"}],"text":"^im$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Disembowel","enabled":true,"actions":[{"type":"script","enabled":true,"script":"runie.swing('disembowel', 'sword', '', false, false, false, false, true);"}],"text":"^dsb$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Overwhelm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"runie.swing('battlefury overwhelm', 'hammer', '', false, false, false, true);"}],"text":"^ow$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Brain","enabled":true,"actions":[{"type":"script","enabled":true,"script":"runie.swing('brain');"}],"text":"^brn$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Skullcrush","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('wield warhammer','skullcrush &tar');"}],"text":"^skc$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]},{"type":"group","name":"Gagging: Fractures","enabled":true,"actions":[],"items":[{"type":"trigger","name":"Skull Fractures","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\nclient.prompt.vars.skullFracs = args[1];"}],"text":"^(?:\\w+) suffers from (.+) skull fractures\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Wrist Fractures","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\nclient.prompt.vars.wristFracs = args[1];"}],"text":"^(?:\\w+) suffers from (.+) wrist fractures\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Torso Fractures","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\nclient.prompt.vars.torsoFracs = args[1];"}],"text":"^(?:\\w+) suffers from (.+) cracked ribs\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Leg Fractures","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\nclient.prompt.vars.legFracs = args[1];"}],"text":"^(?:\\w+) suffers from (.+) torn tendons\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Parrying","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\nfor (let limb in combat.limb)\n    if (limb == args[1])\n        client.prompt.vars.parrying = combat.limb[limb];\nclient.prompt.vars.parrycolor = 'turquoise';"}],"text":"^(?:\\w+) is attempting to parry blows directed at (?:\\w+) (.+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Not Parrying","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\nclient.prompt.vars.parrying = \"Z\";\nclient.prompt.vars.parrycolor = 'grey';"}],"text":"^(?:\\w+) does not seem to be parrying anything\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Battlefury Per on Balance","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nhasNumber = function(myString) {\n  return /\\d/.test(myString);\n};\n\n// Only perceives when the target is a person, not a number\nif (!hasNumber(GMCP.Target))\n\tsend_command(\"battlefury perceive \"+GMCP.Target);"}],"text":"You may channel the fury of battle once again.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"alias","name":"Clear Fractures","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nclient.prompt.vars.skullFracs = \"0\";\nclient.prompt.vars.wristFracs = \"0\";\nclient.prompt.vars.legFracs = \"0\";\nclient.prompt.vars.torsoFracs = \"0\";\nclient.prompt.vars.parrying = \"Z\";\nclient.prompt.vars.parrycolor = 'grey';"}],"text":"reset","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Manual Perceiving","enabled":true,"actions":[{"type":"command","enabled":true,"command":"battlefury perceive @tar","prefix_suffix":true}],"text":"per","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Target Curing Fractures","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nsend_command(\"queue add class battlefury perceive\");"}],"text":"^(\\w+) takes some elixir from (.+) and rubs it (into|on) (his|her) (legs|arms|torso|head)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Hit Confirms","enabled":true,"actions":[],"items":[{"type":"trigger","name":"Stripping Shield Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\ncombat.attack(current_text(), \"slateblue\", \"\");"}],"text":"^Lunging forward, you bring ?(.+) down in a savage diagonal blow, carving through ?(.+) (magical shield|aura of rebounding)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Attempted Hew/Pulverise","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nlet reflex1 = reflex_find_by_name('trigger', 'Pulverise/Hew Leg Confirm', true, false, '-- main package --');\n\nlet reflex2 = reflex_find_by_name('trigger', 'Pulverise/Hew Arm Confirm', true, false, '-- main package --');\n\nreflex_enable(reflex1);\nsetTimeout(reflex_disable, 10, reflex1);\nreflex_enable(reflex2);\nsetTimeout(reflex_disable, 10, reflex2);"}],"text":"^(Taking hold of (?:.+) with a firm two-handed grip, you hew savagely at|Throwing your full weight into the motion, you bring (?:.+) across in a terrible blow toward) (?:\\w+)'s (left|right) (leg|arm)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Pulverise/Hew Leg Confirm","enabled":false,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"},{"type":"disableme","enabled":true}],"text":"^(?:\\w+) almost falls as the (hammer crunches home into the bones of|blade savagely bites into) (?:her|his) lower (?:\\w+) leg\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Pulverise/Hew Arm Confirm","enabled":false,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"},{"type":"disableme","enabled":true}],"text":"^The (?:\\w+) crunch of bone can be heard as the (?:\\w+) smashes into the (?:\\w+) arm of (?:\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Attempted Overhand","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let reflex = reflex_find_by_name('trigger', 'Overhand Confirm', true, false, '-- main package --');\n\nreflex_enable(reflex);\nsetTimeout(reflex_disable, 10, reflex);"}],"text":"^Raising (?:.+) above your head, you bring it down upon (?:.+)'s head with terrible force\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Overhand Confirm","enabled":false,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"},{"type":"disableme","enabled":true}],"text":"^(?:\\w+) staggers( back)? as the (?:\\w+) (catches|strikes) (?:\\w+) (a glancing blow to|in the side of) the head\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Attempted Underhand","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let reflex = reflex_find_by_name('trigger', 'Underhand Confirm', true, false, '-- main package --');\n\nreflex_enable(reflex);\nsetTimeout(reflex_disable, 10, reflex);\ngag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"}],"text":"^Bracing your feet, you lunge upward at (?:\\w+) with (?:.+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Underhand Confirm","enabled":false,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"},{"type":"disableme","enabled":true}],"text":"^(?:\\w+) doubles over as the (?:hammer|blade) (?:savagely crunches|slams) into (?:his|her) (ribcage|side)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Overwhelm confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"}],"text":"^You lift a (.+) above your head, channeling all of your aggression into the preparation for a single, catastrophic blow\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Impale Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nfor (let idx = 0; idx < 6; idx++)\n\tcombat.echo(args[1]+\" impaled !!!\", \"orange\", \"\");\nif (raid.relaying)\n\tsend_command(\"pt \"+GMCP.Target+\" is impaled.\");"}],"text":"^You draw your blade back and plunge it deep into the body of (.+) impaling (?:him|her) to the hilt\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Disembowel Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nfor (let idx = 0; idx < 6; idx++)\n\tcombat.echo(args[1]+\" disemboweled !!!\", \"orange\", \"\");\nif (relaying)\n\tsend_command(\"pt \"+GMCP.Target+\" disemboweled.\");"}],"text":"^With a vicious snarl you carve a merciless swathe through the steaming guts of (.+), who gurgles and chokes as you withdraw your dripping blade, glistening with gore\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Brain Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nfor (let idx = 0; idx < 6; idx++)\n\tcombat.echo(args[1]+\" BRAINED !!!\", \"orange\", \"\");"}],"text":"^You feel the satisfying crunch of bone as a Worldforge Warhammer smashes home\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Upset Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nfor (let idx = 0; idx < 6; idx++)\n\tcombat.echo(args[2]+\" proned !!!\", \"orange\", \"\");\nif (relaying)\n\tsend_command(\"pt \"+args[2]+\" PRONED\");"}],"text":"^Dropping into a low crouch, you expertly tangle (.+) with the legs of (\\w+), sending (\\w+) sprawling\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Devastate Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"}],"text":"^Bracing your feet, you launch a devastating slash at the legs of (\\w+), delivering a glancing blow\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Writhed Off Impale","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (raid.relaying)\n\tsend_command(\"pt \"+args[2]+\" writhed off of impale\");"}],"text":"^With a look of agony on (\\w+) face, (\\w+) manages to writhe (\\w+) free of the weapon which impaled (\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"trigger","name":"Recover Footing","enabled":true,"actions":[{"type":"command","enabled":true,"command":"recover footing"}],"text":"You are no longer stunned.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Gagging: Recovery","enabled":true,"actions":[{"type":"gag","enabled":true}],"text":"You have no need to recover your footing - you are already standing.","matching":"exact","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Engage Handling","enabled":true,"actions":[],"items":[{"type":"trigger","name":"Engaged","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nrunie.engaged = true;"}],"text":"^You move in to engage (\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Engage No Target Break","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nrunie.engaged = false;"}],"text":"^(You cannot see that being here.|You detect nothing here by that name.|I do not recognise anything called that here|Nothing can be seen here by that name.)$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Engage Leaving Break","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nrunie.engaged = false;"}],"text":"^You lash out at (\\w+) as (he|she) turns to flee\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Engage+Isaz Proc","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nrunie.engaged = false;\nsend_command(\"engage\");"}],"text":"^As (\\w+) turns away from you, you draw upon the power of isaz and deliver a vicious blow with your runeblade, sending (\\w+) staggering\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]}]},{"type":"group","name":"Dragonform","enabled":false,"actions":[],"items":[{"type":"group","name":"Actions","enabled":true,"actions":[],"items":[{"type":"alias","name":"Dragonsense","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(`dragonsense ${args[1]}`);"}],"text":"^dsn (\\w+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Rend (limb)","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let limb = combat.limbs[args[1]];\n\nqueue.do(\n    'wield shield left',\n    'wipe claws',\n    `rend &tar ${limb} curare`,\n    'dragoncurse &tar impatience 1',\n    'breathgust & tar',\n    'summon acid'\n);"}],"text":"^d(ll|rl|ra|la|t|h)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Rend (aff)","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield shield left',\n    'wipe claws',\n    `dragoncurse &tar ${dragon.affs[args[1]]} 1`,\n    `rend &tar ${dragon.venoms[args[1]]}`,\n    'summon acid'\n);"}],"text":"^d(i|k|w|a|s|p|c)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Roar","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield shield left',\n    'dragoncurse &tar sensitivity 1',\n    'dragonroar &tar',\n    'summon acid',\n);"}],"text":"drr","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Bite","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield shield left',\n    'bite &tar',\n    'dragoncurse &tar impatience 1',\n    'breathgust &tar',\n    'summon acid',\n);"}],"text":"db","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Blast","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield shield left',\n    'dragoncurse &tar impatience 3',\n    'blast &tar'\n);"}],"text":"dbl","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Breathrain","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield shield left', \n    'breathrain'\n);"}],"text":"rain","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Breathstream","enabled":true,"actions":[{"type":"script","enabled":true,"script":"dragon.stream_dir = args[1];\n\nqueue.do(\n    'wield shield left',\n    `breathstream &tar ${args[1]}`,\n    'summon acid'\n);"}],"text":"^dbs (n|ne|e|se|s|sw|w|nw|u|d|in|out)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Breathstorm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield shield left',\n    'breathstorm',\n    'summon acid'\n);"}],"text":"storm","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Devour","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'devour'\n);"}],"text":"dv","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Becalm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield shield left',\n    'becalm'\n);"}],"text":"dbb","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Dragonheal","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield shield left',\n    'dragonheal'\n);"}],"text":"dhl","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Dragonflex","enabled":true,"actions":[{"type":"script","enabled":true,"script":"\nqueue.do('dragonflex');"}],"text":"df","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Pierce the Veil","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('pierce the veil');"}],"text":"gare","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Demolish Wall","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield shield left',\n    `demolish wall ${args[1]}`\n);"}],"text":"^dw (n|ne|e|se|s|sw|w|nw|u|d|in|out)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Track","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let person = args[1] != undefined ? args[1] : ' &tar';\n\nqueue.do(`track${person}`);"}],"text":"^trk(\\s\\w+)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]},{"type":"group","name":"Confirms","enabled":true,"actions":[],"items":[{"type":"trigger","name":"Dragonsense Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"replace_current_line(0, current_text().length, \"You sense that \"+args[1]+\" is at \"+args[2]+\", in \"+args[3]);\n\nif (raid.relaying) { \n    send_command(\"pt \"+args[1]+\" is at \"+args[2]+\", in \"+args[3]); \n}"}],"text":"^Tapping into the unfathomable depths of your power, you sense that (\\w+) is at (.+), in (.+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Rend Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"}],"text":"^Lunging forward with long, flashing claws extended, you tear into the flesh of (\\w+)'s (.+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Rend (aff) Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");\nif (raid.relaying && dragon.venom != null) {\n    send_command(`pt ${dragon.ven_affs[dragon.venom]} on ${args[1]}`);\n    dragon.venom = null;\n}"}],"text":"^Lunging forward with long, flashing claws extended, you tear into (\\w+) ruthlessly\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Roar Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"}],"text":"Your nostrils flare with a rush of air as your sinuous body contracts and your mouth opens wide to emit a rippling, unbroken roar that reverberates through the very earth underfoot.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Bite Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"}],"text":"^Twisting your neck sideways, you seize (\\w+)'s body between your massive jaws, jerking (\\w+) back and forth and leaving ragged gashes in (\\w+) flesh\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Bite (Prone) Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"for (let idx = 0; idx < 6; idx++)\n\tcombat.echo(args[1]+\" prone bitten !!!\", \"orange\", \"\");"}],"text":"^Twisting to grasp (\\w+) in your powerful jaws, you sink your teeth deep into (\\w+) flesh before tossing (\\w+) helpless body into the air and catching (\\w+) once more in your teeth\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Breathstream Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ngag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");\n\nif (raid.relaying) {\n\tsend_command(`pt Breathstreamed ${args[1]} ${combat.dirs[dragon.stream_dir]}`);\n}"}],"text":"^Focusing your breath into a concentrated stream, you direct a blast of acid towards (\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Demolish Wall Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (raid.relaying) {\n\tsend_command(\"pt Wall destroyed \"+args[1].toUpperCase());\n}\nsys.echo(\"Demolished wall \", 'white', args[1].toUpperCase(), 'orange');"}],"text":"^Whipping your tail around, you strike the wall to the (\\w+) with a powerful blow. A network of fine fractures spreads over its surface before it suddenly collapses\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Track Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (raid.relaying) {\n    send_command(`pt Tracked to ${args[1]} at ${args[2]} `);\n}"}],"text":"^You track (\\w+) to (.+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Blast confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"slateblue\", \"\");"}],"text":"^Opening your maw, you force out a tremendous stream of acid, blasting the flesh from the very bones of (.+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Curse (start) Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"dragon.curse = args[1];"}],"text":"^You summon your ancient power and direct the curse of (\\w+) to strike down \\w+ in 1 seconds\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Curse (land) Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (raid.relaying && args[1] == GMCP.Target && dragon.curse != null) {\n    if (dragon.curse == 'sensitivity') {\n        dragon.curse = 'prefarar';\n    }\n    send_command(`pt ${dragon.curse} on ${args[1]}`);\n    dragon.curse = null;\n}"}],"text":"^(\\w+) convulses under the influence of some invisible force\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Envenom Claws","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] != 'curare') {\n    dragon.venom = args[1];\n}"}],"text":"^You rub some (\\w+) on your wickedly sharp claws\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Veilglancing","enabled":true,"actions":[],"items":[{"type":"trigger","name":"Veilglance","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nvglance_per = args[1];\nvglance_num = 0;\nvglance_place = '';\nvglance = true;"}],"text":"^Folding the Veil of reality, you bend your mighty will to seek out (\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Veilglance Room Capture","enabled":false,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (vglance_num == 0) {\n    vglance_place = args[1];\n}\nif (vglance_num == 1) {\n    let text = args[1];\n    let tokens = text.split(' ');\n    \n    let regexp = /A sigil in the shape of a small, rectangular monolith is on the ground\\./;  \n    \n    let mono = regexp.test(args[1]);\n    \n    let people = [];\n    \n    let exceptions = [];\n    for (let idx = 0; idx < tokens.length; idx++) {\n        if (cdb.characterServerList.hasOwnProperty(tokens[idx])) {\n            if (tokens[idx] == 'Fern' && tokens[idx-1] == \"Weaver's\") {\n                exceptions.push('Fern');\n            }\n        }\n    }\n    \n    \n    for (let person in cdb.characterServerList) {\n        // The \\\\bs in the RegExp set boundries so you only catch full\n        // names. Not names that are substrings of other words\n        let regexper = new RegExp('\\\\b'+person+'\\\\b', 'g');\n        \n        if (regexper.test(text))\n            people.push(person);\n    \n    }\n    \n    for (let name of exceptions) {\n        people = people.filter(person => person != name);\n    }\n    \n    let sentence = '';\n    \n    let num_ppl = people.length;\n    \n    if (num_ppl == 1) {\n        sentence += `${people[0]} (${num_ppl}) is at `;\n    }\n    else if (num_ppl == 2) {\n        sentence += `${people[0]} and ${people[1]} (${num_ppl}) are at `;\n    }\n    else {\n        for (let idx = 0; idx < num_ppl; idx++) {\n            if (idx < num_ppl-2)\n                sentence += `${people[idx]}, `;\n            if (idx == num_ppl-2)\n                sentence += `${people[idx]}, and `;\n            if (idx == num_ppl-1)\n                sentence += `${people[idx]} (${num_ppl}) are at `;\n    \t}\n    }\n    \n    sentence += vglance_place;\n    \n    if (mono)\n        sentence += ' (MONOLITH PRESENT!!!)';\n    else\n        sentence += ' (NO MONOLITH!)';\n    \n    if (raid.relaying)\n    \tsend_command(`pt ${sentence}`, 'yellow');\n};\n\nvglance_num++;\n"}],"text":"^(.+)$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Veilglance Termination","enabled":false,"actions":[{"type":"disableme","enabled":true},{"type":"script","enabled":true,"script":"//Enter the script here\nlet dummy = () => {\n    vglance = false;\n}\nsetTimeout(dummy, 500);"}],"text":"^(You see (a single exit|exits) leading (.+)\\.|There are no obvious exits\\.)$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Veilglance Onto Orb","enabled":false,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (raid.relaying)\n    send_command(`pt Unable to glance ${vglance_per}, ORB PRESENT`);\nvglance = false;"},{"type":"disableme","enabled":true}],"text":"Your vision is obstructed by a blinding shimmer, leaving you unable to discern the details of the room.","matching":"exact","whole_words":true,"case_sensitive":true}]}]},{"type":"group","name":"Druid","enabled":true,"actions":[],"items":[{"type":"group","name":"Metamorphosis","enabled":true,"actions":[],"items":[{"type":"alias","name":"Morphing","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.doFree(`morph ${args[1]}`);"}],"text":"^(wyvern|hydra|slot)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Prismatic","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action = ['sing melody'];\nif (GMCP.CharStats[2].substring(7) != 'Nightingale') {\n    action = ['morph nightingale', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['wield quarterstaff', 'flail quarterstaff', ...action];\n\nif (druid.hydraBal) {\n\tqueue.do.apply(queue, action);\n}"}],"text":"lyre","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Yank","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action = ['yank &tar'];\n//let target = args[1] == undefined ? '&tar' : allytarget; -> Implement ally targetting\nif (GMCP.CharStats[2].substring(7) != 'Elephant') {\n    action = ['morph elephant', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\nelse {\n    action = ['wield quarterstaff', 'flail quarterstaff', ...action];\n}\nif (druid.hydraBal) {\n\tqueue.do.apply(queue, action);\n}"}],"text":"^yank(a)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Ambush","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action;\nif (GMCP.CharStats[2].substring(7) != 'Wolverine') {\n    action = ['wield quarterstaff', 'morph wolverine', 'ambush &tar'];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\nelse {\n    action = ['wield quarterstaff', 'ambush &tar'];\n}\nif (druid.hydraBal) {\n\tqueue.do.apply(queue, action);\n}"}],"text":"am","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Freeze Ground","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action;\nif (GMCP.CharStats[2].substring(7) != 'Icewyrm') {\n    action = ['wield quarterstaff', 'morph icewyrm', 'freeze ground'];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\nelse {\n    action = ['wield quarterstaff', 'freeze ground'];\n}\nif (druid.hydraBal) {\n\tqueue.do.apply(queue, action);\n}"}],"text":"fg","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Pound","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action;\nif (GMCP.CharStats[2].substring(7) != 'Gorilla') {\n    action = ['wield quarterstaff', 'morph gorilla', 'pound &tar', 'assess'];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\nelse {\n    action = ['wield quarterstaff', 'order entourage kill &tar', 'flail quarterstaff', 'pound &tar', 'assess'];\n}\nif (druid.hydraBal) {\n\tqueue.do.apply(queue, action);\n}"}],"text":"pnd","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Maul","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action;\nif (GMCP.CharStats[2].substring(7) != 'Wyvern') {\n    action = ['wield quarterstaff', 'morph wyvern', 'summon fire', 'maul &tar', 'assess'];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\nelse {\n    action = ['wield quarterstaff', 'flail quarterstaff', 'order entourage kill &tar', 'summon fire', 'wreathe', 'maul &tar', 'assess'];\n}\nif (druid.hydraBal) {\n\tqueue.do.apply(queue, action);\n}"}],"text":"ma","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Inferno","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action;\nif (GMCP.CharStats[2].substring(7) != 'Wyvern') {\n    action = ['wield quarterstaff', 'morph wyvern', 'summon fire', 'ignite', 'inferno', 'assess'];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\nelse {\n    action = ['wield quarterstaff', 'flail quarterstaff', 'order entourage kill &tar', 'summon fire', 'ignite', 'inferno', 'assess'];\n}\nif (druid.hydraBal) {\n\tqueue.do.apply(queue, action);\n}"}],"text":"inf","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Incinerate","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action;\nif (GMCP.CharStats[2].substring(7) != 'Wyvern') {\n    action = ['wield quarterstaff', 'morph wyvern', 'summon fire', 'ignite', 'incinerate &tar'];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\nelse {\n    action = ['wield quarterstaff', 'flail quarterstaff', 'order entourage kill &tar', 'summon fire', 'ignite', 'incinerate &tar'];\n}\nif (druid.hydraBal) {\n\tqueue.do.apply(queue, action);\n}"}],"text":"inc","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Track","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let person = args[1] != undefined ? args[1] : ' &tar';\nlet action = [`track${person}`];\nif (GMCP.CharStats[2].substring(7) != 'Wyvern') {\n    action = ['morph wyvern', ...action];\n}\n\naction = ['wield quarterstaff', 'flail quarterstaff', ...action];\n\nif (druid.hydraBal) {\n\tqueue.do.apply(queue, action);\n}"}],"text":"^trk(\\s\\w+)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Fitness","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action;\nif (druid.fitness.includes(GMCP.CharStats[2].substring(7))) {\n    action = ['wield quarterstaff', 'fitness'];\n}\nelse {\n    action = ['wield quarterstaff', 'morph hydra', 'fitness'];\n}\n\nqueue.do.apply(queue, action);\n"}],"text":"fit","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Hdyra Bind","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let head2 = args[1] == undefined ? 'hydra roar &tar' : 'hydra snap &tar';\nlet action = ['hydra secrete prefarar', 'hydra bite &tar', head2, 'hydra bind &tar', 'assess'];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['wield quarterstaff', 'flail quarterstaff', 'order entourage kill &tar', ...action];\n\n\n\nqueue.do.apply(queue, action);\n"}],"text":"^(d)?bind$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Hydra Prep","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action = [ druid.secretion[args[1]], 'hydra bite &tar', druid.second[args[1]], druid.clamp[args[2]], 'assess' ];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['wield quarterstaff', 'flail quarterstaff', 'order entourage kill &tar', ...action];\n\n\nqueue.do.apply(queue, action);\n"}],"text":"^(n|d|b)(ll|rl|la|ra)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Hydra Neg","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action = [ 'hydra negate &tar', 'Hydra secrete nechamandra', 'hydra bite &tar', 'hydra snap &tar', 'assess' ];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['wield quarterstaff', 'flail quarterstaff', 'order entourage kill &tar', ...action];\n\n\nqueue.do.apply(queue, action);\n"}],"text":"free","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Bash/Clamp","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action = [ druid.clamp[args[1]], 'assess' ];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['wield quarterstaff', 'flail quarterstaff', 'order entourage kill &tar', `bash &tar ${combat.limbs[args[1]]}`, ...action];\n\n\nqueue.do.apply(queue, action);"}],"text":"^s(ll|rl|la|ra)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Shield break","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let head2 = args[1] == undefined ? 'hydra roar &tar' : 'hydra snap &tar';\nlet action = [ 'hydra shatter &tar', 'hydra secrete prefarar', 'hydra bite &tar', 'hydra snap &tar' ];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['wield quarterstaff', 'flail quarterstaff', 'order entourage kill &tar', ...action];\n\nqueue.do.apply(queue, action);"}],"text":"str","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Concussion Break","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action = [ druid.clamp[args[1]], 'get concussionbomb from box', 'wield concussionbomb', 'throw concussionbomb at ground' ];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['order entourage kill &tar', ...action];\n\n\nqueue.do.apply(queue, action);"}],"text":"^k(ll|rl|la|ra)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Embrace Break","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action = [druid.clamp[args[1]], 'reclamation embrace &tar'];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['wield quarterstaff', 'flail quarterstaff', ...action];\n\n\nqueue.do.apply(queue, action);\n"}],"text":"^e(ll|rl|la|ra)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Swing Staff","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield quarterstaff',\n    'swing quarterstaff',\n    'hydra bind &tar'\n);"}],"text":"ks","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Concussion/Bind","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action = [ 'hydra bind &tar' ];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['order entourage kill &tar', ...action];\n\n\nqueue.do.apply(queue, action);"}],"text":"kb","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Throwing Axes","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('get handaxe', 'wield handaxe', `throw handaxe at &tar ${combat.limbs[args[1]]}`);"}],"text":"^a(ll|rl|la|ra)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Axe/Hydra Arms","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let action = ['get handaxe', 'wield handaxe', `throw handaxe at &tar left arm`, druid.clamp['ra'], 'assess'];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['order entourage kill &tar', ...action];\n\n\nqueue.do.apply(queue, action);"}],"text":"aa","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Axe/Hydra Arm/Leg","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let clamp = args[1] == 'l' ? 'll' : 'rl';\nlet limb = args[1] == 'l' ? 'left arm' : 'right arm';\nlet action = ['get handaxe', 'wield handaxe', `throw handaxe at &tar ${limb}`, druid.clamp[clamp], 'assess' ];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['order entourage kill &tar', ...action];\n\n\nqueue.do.apply(queue, action);"}],"text":"^k(l|r)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Clamp/Leg Shatter","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//queue.do('curing off', 'wield quarterstaff', 'shatter left leg &tar');\n\nlet action = [];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra'];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['wield quarterstaff', 'flail quarterstaff', ...action, 'curing off', 'shatter left leg &tar'];\n\nsend_command('queue addclear class hydra legclamp right');\nqueue.do.apply(queue, action);"}],"text":"sht","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Begin Shatter","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo(\"Beginning Shatter.\", 'white', ' Do NOT move.', 'orange');"}],"text":"^You slowly pull back a wyvern-etched druidic quarterstaff, readying yourself for a devastating strike\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Shatter Success","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");\n//send_command('queue addclear class hydra armclamp right');\n\n/*\nlet action = [druid.clamp['la'], 'reclamation embrace &tar'];\n\nif (GMCP.CharStats[2].substring(7) != 'Hydra') {\n    action = ['morph hydra', ...action];\n    if (GMCP.CharStats[2].substring(7) == 'Wyvern') {\n        action = ['relax flame', ...action];\n    }\n}\n\naction = ['wield quarterstaff', 'flail quarterstaff', ...action];\nqueue.do.apply(queue, action);\n*/"},{"type":"command","enabled":true,"command":"curing on"}],"text":"^You strike the left leg of (\\w+) with a mighty blow\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Failed Shatter","enabled":true,"actions":[{"type":"command","enabled":true,"command":"curing on"},{"type":"script","enabled":true,"script":"sys.echo('Shatter ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Turn on curing!', 'white');\nsys.echo('Shatter ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Turn on curing!', 'white');\nsys.echo('Shatter ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Turn on curing!', 'white');"}],"text":"You cease concentrating on shattering your opponent's limbs.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"group","name":"Confirms","enabled":true,"actions":[],"items":[{"type":"trigger","name":"Hydra Bite","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"}],"text":"^Leaping forward, you sink your vicious fangs deep into (\\w+)'s body\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Hydra Snap","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"}],"text":"^You send one of your many heads to snap at (\\w+)'s flesh\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Hydra Bind","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");\n\ndruid.hydraBal = false;\n\nif (raid.relaying) {\n    send_command(`pt ${args[1]} bound.`);\n}"}],"text":"^You command your many heads to bind (\\w+)\\. With a synchronous, guttural rasp, they obey\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Hydra Roar","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"}],"text":"^Summoning rage and malice, you unleash a bestial roar at (\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"AttemptedClamp","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let reflex = reflex_find_by_name('trigger', 'SuccessfulClamp', true, false, '-- main package --');\n\ndruid.hydraBal = false;\n\nreflex_enable(reflex);\nsetTimeout(reflex_disable, 10, reflex);"}],"text":"^You command your many heads to clamp (?:\\w+)'s (?:right|left) (?:arm|leg)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"SuccessfulClamp","enabled":false,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"},{"type":"disableme","enabled":true}],"text":"^They seize (?:his|her) (?:right|left) (?:arm|leg) with a bonecrunching grip\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Pound","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\ncombat.attack(current_text(), \"black\", \"seagreen\");"}],"text":"^You raise your muscled arms into the air and, using your entire body for leverage, bring them crashing down upon (\\w+), who shrieks in pain\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Track Confirm","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (raid.relaying) {\n    send_command(`pt Tracked to ${args[1]} at ${args[2]} `);\n}"}],"text":"^You track (\\w+) to (.+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Bind Up!","enabled":true,"actions":[{"type":"script","enabled":true,"script":"gag_current_line();\nsys.echo('You may ', 'white', 'bind ', 'MediumSeaGreen', 'your victims once again', 'white');"}],"text":"You may bind your victims once again.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Hydra Bal","enabled":true,"actions":[{"type":"script","enabled":true,"script":"druid.hydraBal = true;"}],"text":"Your many serpentine heads may act again.","matching":"exact","whole_words":true,"case_sensitive":true}]}]},{"type":"group","name":"Groves","enabled":true,"actions":[],"items":[{"type":"group","name":"Usable Anywhere","enabled":true,"actions":[],"items":[{"type":"alias","name":"Return","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield quarterstaff',\n    'grove return',\n    'grove energy'\n);"}],"text":"return","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Vigour","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield quarterstaff',\n    `evoke vigour${args[1] == undefined ? '' : args[1]}`,\n    'evoke status'\n);"}],"text":"^vig(\\s\\w+)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Remedy","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] != undefined) {\n    queue.do(\n        'wield quarterstaff',\n        `evoke remedy ${args[1]}`,\n        'evoke status'\n    );\n}\n// Implement an else with ally target"}],"text":"^rem(\\s\\w+)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Wildgrowth","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield quarterstaff',\n    'evoke wildgrowth',\n    'evoke status'\n);"}],"text":"wg","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Overgrowth","enabled":true,"actions":[{"type":"script","enabled":true,"script":"raid.following = false;\nlet loc = mapdb_v.room_gmcp.name;\n\nsend_command(`pt Overgrowing totem at ${loc}|wield quarterstaff|evoke overgrowth`);\n"}],"text":"og","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Barrier","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] != undefined) {\n    queue.do(\n        'wield quarterstaff',\n        `evoke barrier${args[1]}`,\n        'evoke status',\n    );\n}\n// And an ally target else"}],"text":"^bar(\\s\\w+)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Dampen","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield quarterstaff',\n    'evoke dampening',\n    'evoke status',\n);"}],"text":"damp","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Lightning","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield quarterstaff',\n    `evoke lightning &tar ${args[1]}`,\n    'evoke status'\n);"}],"text":"^ln (\\w+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Panacea","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield quarterstaff',\n    'evoke panacea',\n    'evoke status'\n);"}],"text":"pana","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Vivify","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let loc = mapdb_v.room_gmcp.name;\nsend_command(`pt Vivifying at ${loc}|curing off|vivify`);"}],"text":"viv","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Check sunlight","enabled":true,"actions":[{"type":"command","enabled":true,"command":"evoke status","prefix_suffix":true}],"text":"sun","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Refill sunlight","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.dor('evoke sunlight/evoke status');\ndruid.refilling = true;"}],"text":"refill","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Harmony","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] != undefined) {\n    queue.do(\n        'wield quarterstaff',\n        `evoke remedy ${args[1]}`,\n        'evoke status'\n    );\n}\nelse {\n    queue.do('wield quarterstaff', 'evoke harmony me', 'evoke status');\n}"}],"text":"^harm(\\s\\w+)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Wildgrowth","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Wildgrowth defence ', 'white', 'Raised', 'MediumSeaGreen');\nif (raid.relaying) {\n    send_command('pt Wildgrowth raised');\n}"}],"text":"You quietly recite an incantation calling on all that is wild and green. As you speak the final syllables, you slowly raise your quarterstaff skywards, drawing vibrant new growth from the earth.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Wildgrowth Ended","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Wildgrowth defence ', 'white', 'Expired', 'PaleVioletRed');\nif (raid.relaying) {\n    send_command('pt Wildgrowth expired');\n}"}],"text":"Curling in on itself, the tangle of wild green growth surrounding you retreats into the earth.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Overgrowth Started","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Beginning totem overgrowth ', 'white', '[1/4]', 'MediumSeaGreen');"}],"text":"Using one end of your quarterstaff, you sketch a tight circle around the base of a runic totem.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Overgrowth [2]","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Continuing totem overgrowth ', 'white', '[2/4]', 'MediumSeaGreen');"}],"text":"Willing new growth into life, you thrust your quarterstaff at the point at which the totem meets the earth. Moments later, a ring of tiny emerald shoots peep into existence.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Overgrowth [3]","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Continuing totem overgrowth ', 'white', '[3/4]', 'MediumSeaGreen');"}],"text":"Pulses of sunlight from your quarterstaff spur the budding plants to grow at preternatural speed, gaining size and shape as they surge up the wooden totem.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Overgrowth Complete","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Completed ', 'MediumSeaGreen', 'totem overgrowth ', 'white', '[4/4]', 'MediumSeaGreen');\nif (raid.callers.length > 0) {\n    raid.following = true;\n}"}],"text":"With the totem now completely ensconced by coiling vines, the verdant tendrils cease their growth. Lush leaves unfurl as Nature stakes its claim on the pillar of green.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Overgrowth Interrupted","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Overgrowth ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');\nsys.echo('Overgrowth ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');\nsys.echo('Overgrowth ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');\nif (raid.callers.length > 0) {\n    raid.following = true;\n}"}],"text":"Distracted, you cease your efforts to obfuscate the totem.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Vivify Begin","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Beginning Vivification');"}],"text":"You kneel, placing a hand upon the blighted ground of the Crimson Isle.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Vivify Complete","enabled":true,"actions":[{"type":"script","enabled":true,"script":"send_command('pt VIVIFICATION complete -- 10 seconds until I can move');\nsend_command('curing on');"}],"text":"Your communion with Nature complete, you straighten.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Sunlight Full","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (druid.refilling) {\n    queue.dor_stop();\n}"}],"text":"Tightening your grip on your quarterstaff, you sense that it is imbued with 5000 of a maximum 5000 sunlight.","matching":"exact","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"In-Grove Only","enabled":true,"actions":[],"items":[]}]},{"type":"group","name":"Reclamation","enabled":true,"actions":[],"items":[{"type":"group","name":"Claiming","enabled":true,"actions":[],"items":[{"type":"alias","name":"Reclaim","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('wield quarterstaff','reclamation begin');"}],"text":"claim","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Expand","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('wield quarterstaff','reclamation expand');"}],"text":"exp","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Relinquish","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'wield quarterstaff',\n    'reclamation relinquish'\n);"}],"text":"rel","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Status","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.doFree('wield quarterstaff','reclamation status');"}],"text":"rstat","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Begin Reclaim","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo(\"Started Reclaiming land.\", 'white');\nif (raid.relaying) {\n    let loc = mapdb_v.room_gmcp.name;\n\tlet area = mapdb_v.room_gmcp.area;\n    send_command(`pt Reclaiming ${loc} in ${area}`);\n}"}],"text":"Kneeling down, you place one hand to the ground, beginning the arduous process of reclaiming this location for nature.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Begin Expand","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo(\"Started Reclaiming Land.\", 'white');"}],"text":"Placing one hand to the ground, you begin the process of expanding nature's dominion to overcome this location.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Interrupted Claim","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Reclaiming ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');\nsys.echo('Reclaiming ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');\nsys.echo('Reclaiming ', 'white', 'INTERRUPTED', 'PaleVioletRed', '. Restart!', 'white');"}],"text":"You cease attempting to reclaim this location for nature.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Land Claimed","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('Room Successfully', 'White', ' Reclaimed', 'MediumSeaGreen');\nif (raid.relaying) {\n    let loc = mapdb_v.room_gmcp.name;\n\tlet area = mapdb_v.room_gmcp.area;\n    send_command(`pt ${loc} Reclaimed!`);\n}"}],"text":"You feel the ground shift slightly beneath your feet as your attempt is successful.","matching":"exact","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Actions","enabled":true,"actions":[],"items":[{"type":"alias","name":"Forestwalk","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] != undefined) {\n    queue.do('wield quarterstaff',`reclamation forestwalk${args[1]}`);\n}\nelse {\n    queue.do('wield quarterstaff','reclamation forestwalk &tar');\n}"}],"text":"^fwk(\\s\\w+)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Regrowth","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('wield quarterstaff','reclamation regrowth');"}],"text":"regrow","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Smother","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('wield quarterstaff','reclamation smother');"}],"text":"smother","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Subsume","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('wield quarterstaff','reclamation subsume');"}],"text":"subs","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Revive","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] != undefined) {\n    queue.do('wield quarterstaff',`revive${args[1]}`);\n}\nelse {\n    queue.do('wield quarterstaff','revive &tar');\n}"}],"text":"^rez(\\s\\w+)$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Wrath","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('wield quarterstaff','reclamation wrath');"}],"text":"wrath","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Embrace","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('reclamation embrace'); // reclamation embrace"}],"text":"emb","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]},{"type":"group","name":"Effects","enabled":true,"actions":[],"items":[{"type":"alias","name":"Effects Off","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('wield quarterstaff','reclamation terminate all');"}],"text":"effects off","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Lash","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] == undefined) {\n    queue.do('wield quarterstaff','reclamation lash');\n}\nelse {\n    queue.do('wield quarterstaff','reclamation terminate lash');\n}"}],"text":"^lash(\\soff)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Knowledge","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('wield quarterstaff','reclamation knowledge');"}],"text":"^rsense?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Omniscience","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] == undefined) {\n    queue.do('wield quarterstaff','reclamation omniscience');\n}\nelse {\n    queue.do('wield quarterstaff','reclamation terminate omniscience');\n}"}],"text":"^omni(\\soff)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Consume","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] != undefined) {\n    queue.do('wield quarterstaff','reclamation consume');\n}\nelse {\n    queue.do('wield quarterstaff','reclamation terminate consume');\n}"}],"text":"^consume(\\soff)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"group","name":"Spores","enabled":true,"actions":[],"items":[{"type":"alias","name":"Sleep","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] == undefined) {\n    queue.do('wield quarterstaff','reclamation sleepspores');\n}\nelse {\n    queue.do('wield quarterstaff','reclamation terminate sleepspores');\n}"}],"text":"^sleeps(\\soff)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Poison","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] == undefined) {\n    queue.do('wield quarterstaff','reclamation poisonspores');\n}\nelse {\n    queue.do('wield quarterstaff','reclamation terminate poisonspores');\n}"}],"text":"^poison(\\soff)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Pollen","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] == undefined) {\n    queue.do('wield quarterstaff','reclamation pollen');\n}\nelse {\n    queue.do('wield quarterstaff','reclamation terminate pollen');\n}"}],"text":"^pollen(\\soff)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Refresh","enabled":true,"actions":[{"type":"script","enabled":true,"script":"if (args[1] == undefined) {\n    queue.do('wield quarterstaff','reclamation refresh');\n}\nelse {\n    queue.do('wield quarterstaff','reclamation terminate refresh');\n}"}],"text":"^refresh(\\soff)?$","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]}]}]}]},{"type":"alias","name":"Pacify","enabled":true,"actions":[{"type":"command","enabled":true,"command":"order entourage passive","prefix_suffix":true}],"text":"pass","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"group","name":"Tattoos","enabled":false,"actions":[],"items":[{"type":"function","name":"Tattoo Checking","enabled":true,"code":"tattoos = {\n    boundary: 0,\n    boundary_check: reflex_find_by_name('trigger', 'Beginning/Ending', false, false, '-- main package --'),\n    tattoo_check: reflex_find_by_name('trigger', 'Tattoo Check', false, false, '-- main package --'),\n    \n    tats: [\n        'shield',\n        'brazier',\n        'crystal',\n        'boar',\n        'web',\n        'starburst',\n        'moss',\n        'moon',\n        'hourglass',\n        'cloak',\n        'tree',\n        'mindseye',\n        'prism',\n    ],\n    \n    current: [],\n    \n    missing() {\n        setTimeout(\n            () => {\n                let missing = this.tats.filter(tattoo => !this.current.includes(tattoo));\n                let length = missing.length;\n\n                if (length == 0) {\n                    sys.echo('All tattoos present! Continue with your day.', 'white');\n                }\n                else if (length == 1) {\n                    sys.echo('You are missing the ', 'white',\n                             missing[0], 'orange',\n                             ' tattoo. Re-ink it!', 'white'\n                            );\n                }\n                else if (length == 2) {\n                    sys.echo('You are missing the ', 'white',\n                             missing[0], 'orange',\n                             ' and ', 'white',\n                             missing[1], 'orange',\n                             ' tattoos. Re-ink them!', 'white'\n                            );\n                }\n                else {\n                    let block = [];\n                    for (let idx = 0; idx < length-1; ++idx) {\n                        block.push(missing[idx], 'orange', ', ', 'white');\n                    }\n                    block.push('and ', 'white', `${missing[length-1]} `, 'orange');\n                    \n                    block = ['You are missing the ', 'white', ...block, 'tattoos. Re-ink them!', 'white'];\n                    \n                    sys.echo.apply(sys, block);\n                }\n\n                this.boundary = 0;\n            }, 0\n        );\n    },\n};"},{"type":"alias","name":"Tats","enabled":true,"actions":[{"type":"script","enabled":true,"script":"tattoos.current = [];\nsend_command('tattoos');\nreflex_enable(tattoos.boundary_check);\nreflex_enable(tattoos.tattoo_check);"}],"text":"tats","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"Tattoo Check","enabled":false,"actions":[{"type":"script","enabled":true,"script":"tattoos.current.push(args[1]);"}],"text":"^(?:Head|Torso|Left arm|Right arm|Left leg|Right leg|Back)\\s+(?:a|an) (\\S+) tattoo","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Beginning/Ending","enabled":false,"actions":[{"type":"script","enabled":true,"script":"tattoos.boundary += 1;\nif (tattoos.boundary == 2) {\n    tattoos.missing();\n    reflex_disable(tattoos.boundary_check);\n    reflex_disable(tattoos.tattoo_check);\n}"}],"text":"-------------------------------------------------------------------------------","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Tattoo Faded","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo(\n    'Your ', 'white',\n    args[1], 'orange',\n    ' tattoo faded. Re-ink it!', 'white'\n)\n\n// Effectively gag but the line but keep the associated prompt\nreplace_current_line(0, args[0].length, '', '', '');"}],"text":"^A (\\w+) tattoo fades from view and disappears\\.$","matching":"regexp","whole_words":true,"case_sensitive":true}]},{"type":"group","name":"Previous Main (Review)","enabled":true,"actions":[],"items":[{"type":"alias","name":"Seragorn Oberion spam","enabled":false,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\n//let cstr = \"setalias ratata stand/incantation 380846/incantation 382154/incantation 341127/incantation 395060/incantation 383490/incantation 403662/incantation 395826/incantation 399916/incantation 380533/incantation 398818/incantation 366971/incantation ratatosk\";\n\n\n\n\n\n//let cstr = \"setalias mangorize stand/wield left shield/wield right blackjack/bop &tar/noogie &tar/dustthrow &tar/ensconce firecracker on &tar/befuddle &tar/rap &tar/consider &tar\";\n\n\n\n\n//dragonsting/override/reap/dragonspit/corrode\nsend_command('setalias mangorize stand/dragonsting oberion/override oberion/dragonspit oberion/corrode oberion/incantation oberion/consider oberion');\nsend_command('mangorize');"}],"text":"kk","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"group","name":"Seafaring Trial","enabled":false,"actions":[],"items":[{"type":"alias","name":"","enabled":true,"actions":[{"type":"command","enabled":true,"command":"swing up|queue add bal clear rigging","prefix_suffix":true}],"text":"crig","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'unload shot from onager',\n    'load onager with spidershot'\n);\n"}],"text":"lsp","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'unload shot from onager',\n    'load onager with starshot'\n);"}],"text":"lst","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'unload shot from onager',\n    'load onager with chainshot'\n);"}],"text":"lc","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do(\n    'unload shot from onager',\n    'load onager with flare'\n);"}],"text":"lf","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"command","enabled":true,"command":"queue add eqbal fire onager at seamonster","prefix_suffix":true}],"text":"fb","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"command","enabled":true,"command":"queue add eqbal fire onager","prefix_suffix":true}],"text":"fbs","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"command","enabled":true,"command":"swing down"}],"text":"There is nothing to clear from the riggings.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"highlight","enabled":true,"highlight_fg":"#ff0000","highlight_bg":"#ffff00","highlight":"match","highlight_backref":"1"},{"type":"command","enabled":true,"command":"swing down"}],"text":"(T|t)he sails are once again able to be unfurled.","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nsys.echo(current_text(), 'orange','');"}],"text":"You begin the painstaking process of aiming","matching":"begins","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nsys.echo(current_text(), 'orange','');"}],"text":"You call out \"Fire!\" and release the mechanism","matching":"begins","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nsys.echo(current_text(), 'orange','');"}],"text":"You cease the process of aiming the ship's weapon.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nsys.echo(current_text(), 'orange','');"}],"text":"You place a ballista dart carefully into a ballista.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nsys.echo(current_text(), 'orange','');"}],"text":"^You place a (.+) carefully into an onager\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nsys.echo(current_text(), 'orange','');"}],"text":"You've lost sight of your target and stop aiming a ballista.","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"gag","enabled":true}],"text":"The ship moves","matching":"begins","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"gag","enabled":true}],"text":"The ship has turned","matching":"begins","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"gag","enabled":true}],"text":"The ship completes her turn","matching":"begins","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nsys.echo(current_text(), 'green','');"}],"text":"A tentacle of the colossal kraken emerges from the sea and swings into your sails, coating them in a gelatinous slime.","matching":"exact","whole_words":true,"case_sensitive":true}]},{"type":"trigger","name":"3rd Party Tailsweep","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (args[1] == GMCP.Target)\n\tfor (let idx = 0; idx < 6; idx++)\n\t\tcombat.echo(args[1]+\" Tailsweep proned !!!\", \"orange\", \"\");\n\n"}],"text":"^(\\w+) is knocked forcefully off (his|her) feet by the impact of (\\w+)'s huge tail\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"KOTH Hill","enabled":true,"actions":[{"type":"command","enabled":true,"command":""}],"text":"^The HILL for this game is: (.+)$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Cloak Stripped","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nqueue.do('touch cloak');"}],"text":"You suddenly feel that it would be a fine idea to relax your cloak defence.","matching":"exact","whole_words":true,"case_sensitive":true}]},{"type":"trigger","name":"Gagging: Clot","enabled":true,"actions":[{"type":"gag","enabled":true}],"text":"[Curing]: CLOT","matching":"exact","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Assessing","enabled":true,"actions":[{"type":"script","enabled":true,"script":"combat.assess(args[1], ((args[2]/args[3]) * 100).toFixed(2));"}],"text":"^You glance over (\\w+) and see that (?:his|her) health is at (\\d+)/(\\d+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"Hunting: Gained Talisman ","enabled":true,"actions":[{"type":"script","enabled":true,"script":"sys.echo('You have found a ', 'white', args[1], 'orange', ' talisman piece!', 'white');\n\n// Effectively gag but the line but keep the associated prompt\nreplace_current_line(0, args[0].length, '', '', '');"}],"text":"^You have found a (.+) talisman piece!$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"alias","name":"Open Nexus Settings","enabled":true,"actions":[{"type":"script","enabled":true,"script":"let testing = function() {\n  // If we already have a settings window, open that\n  if (client.settings_window && (!client.settings_window.closed)) {\n    client.settings_window.focus();\n    return;\n  }\n  client.settings_window = window.open(\"/settings/\");\n}\n\ntesting();"}],"text":"settings","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Save Nexus Settings","enabled":true,"actions":[{"type":"script","enabled":true,"script":"client.gmcp_save_system(true);"}],"text":"nexus save","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Draw Catarin","enabled":true,"actions":[{"type":"script","enabled":true,"script":"queue.do('legenddeck draw catarin');"}],"text":"cat","matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true}],"description":"Exported reflexes: main"}